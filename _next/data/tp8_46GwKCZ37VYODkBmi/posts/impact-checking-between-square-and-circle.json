{"pageProps":{"id":"impact-checking-between-square-and-circle","title":"弹一弹#2 方块与圆の碰撞物语","date":"2018-05-03","htmlText":"<html><head></head><body><p>编译原理好鸡儿难，课设真尼玛烦，俺现在只想摸鱼 _(┐「ε:)_</p>\n<hr>\n<h2 id=\"前言\">前言</h2>\n<p>对于两个物体之间的碰撞检测，依据两个物体本身属性的不同，所采取的策略也不尽相同。简单的来说可以分为3大类：</p>\n<ol>\n<li>依据每一帧中，几何图形的重合来检测</li>\n<li>基于像素、地图格子来检测</li>\n<li>基于速度矢量与相应判别条件来检测</li>\n</ol>\n<p>在弹一弹的例子中，第一种应该是首要的检测方式，后面两种如果俺开心再写吧【滑稽】</p>\n<p>而在第一种中，又有几种不同的情形需要采取不同策略对待：</p>\n<ol>\n<li>圆-圆</li>\n<li>无旋转矩形-无旋转矩形</li>\n<li>圆-矩形（可有旋转）</li>\n<li>任意多边形</li>\n</ol>\n<p>其中1和2都太过耿直，在此不做说明。本水文着重讨论第3种情形，第4种会更的嗯，俺有骗过你么 （’へ’）</p>\n<h2 id=\"圆--无旋转方块儿\">圆 &#x26; 无旋转方块儿</h2>\n<p>我们要解决的问题，本质上就是要知道圆与矩形有无“接触”——而有了圆-圆检测的经验后，不难想到，我们要做的就是找到<strong>矩形上离圆最近的点</strong>，通过这一点到圆心的距离与圆的半径之间的比较，就能确定圆与矩形是否接触：</p>\n<p>图片来源：<a href=\"https://aotu.io/notes/2017/02/16/2d-collision-detection/\" target=\"_blank\" rel=\"nofollow\">凹凸实验室</a></p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/rect%26circle-1.png\" alt=\"情形2\"></p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/rect%26circle-2.png\" alt=\"情形1\"></p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/rect%26circle-3.png\" alt=\"情形1\"></p>\n<p>不难看出这个最近点在x轴、y轴与圆心之间的关系，可以参考下面这个demo：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YLpBZM\" data-default-tab=\"js,result\" data-user=\"padfoot_07\" data-embed-version=\"2\" data-pen-title=\"rect&#x26;ball\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/padfoot_07/pen/YLpBZM/\" target=\"_blank\" rel=\"nofollow\">rect&#x26;ball</a> by Zhouyi (<a href=\"https://codepen.io/padfoot_07\" target=\"_blank\" rel=\"nofollow\">@padfoot_07</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"nofollow\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"圆--旋转方块儿\">圆 &#x26; 旋转方块儿</h2>\n<p>如果矩形旋转了a度，只需要<strong>以矩形中心为旋转中心，旋转画布-a度</strong>，我们就又回到了上面一种无旋转情形！</p>\n<p>换而言之，我们需要额外做的，就是计算<strong>旋转后的圆心</strong>。那么首先推导一下某个点绕原点旋转一定角度后的坐标：</p>\n<p>证明来源：<a href=\"https://aotu.io/notes/2017/02/16/2d-collision-detection/\" target=\"_blank\" rel=\"nofollow\">凹凸实验室</a></p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/rect%26circle-4.png\" alt=\"原点旋转\"></p>\n<p>A为旋转前，B为原点，C为旋转后，r为半径，则</p>\n<ol>\n<li>设 A 点旋转前的角度为 δ，则旋转（逆时针）到 C 点后的角度为(δ+β)</li>\n<li>由于 |AB| 与 |CB| 相等（即长度），且\n<ul>\n<li>|AB| = y/sin(δ) = x / cos(δ)</li>\n<li>|CB| = d/sin(δ + β) = c / cos(δ + β)</li>\n</ul>\n</li>\n<li>半径 r = x / cos(δ) = y / sin(δ) = d / sin(δ + β) = c / cos(δ + β)</li>\n<li>三角函数两角和差公式：\n<ul>\n<li>sin(δ + β) = sin(δ)cos(β) + cos(δ)sin(β)</li>\n<li>cos(δ + β) = cos(δ)cos(β) - sin(δ)sin(β)</li>\n</ul>\n</li>\n<li>得出旋转后的坐标\n<ul>\n<li>c = r * cos(δ + β) = r * cos(δ)cos(β) - r * sin(δ)sin(β) = x * cos(β) - y * sin(β)</li>\n<li>d = r * sin(δ + β) = r * sin(δ)cos(β) + r * cos(δ)sin(β) = y * cos(β) + x * sin(β)</li>\n</ul>\n</li>\n</ol>\n<p>那么对于旋转中心 (centerX, centerY) ，其实只要做一个坐标轴平移的工作：</p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/rect%26circle-5.png\" alt=\"绕某点旋转\"></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">x’ <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>β<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>cx – centerX<span class=\"token punctuation\">)</span> – <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>β<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>cy – centerY<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> centerX\ny’ <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>β<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>cx – centerX<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>β<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>cy – centerY<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> centerY\n</code></pre>\n<p>以上就是我们需要的旋转公式。</p>\n<p>下面这个demo中应用了上述理论，透明度较低的是旋转后的图形：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rvmKKj\" data-default-tab=\"js,result\" data-user=\"padfoot_07\" data-embed-version=\"2\" data-pen-title=\"rotatedRect&#x26;ball\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/padfoot_07/pen/rvmKKj/\" target=\"_blank\" rel=\"nofollow\">rotatedRect&#x26;ball</a> by Zhouyi (<a href=\"https://codepen.io/padfoot_07\" target=\"_blank\" rel=\"nofollow\">@padfoot_07</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"nofollow\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<hr>\n<p>好了不多说了，我只想看下一集小英雄，再见了您！</p>\n</body></html>","description":"编译原理好鸡儿难，课设真尼玛烦，俺现在只想摸鱼 \\_(┐「ε:)\\_......"},"__N_SSG":true}
{"pageProps":{"id":"js-singleton-pattern","title":"js设计模式——单例模式","date":"2016-11-28","htmlText":"<html><head></head><body><p>单例模式应该是我最早接触的设计模式之一，尽管如此，前两天在写IFE的任务时还是懵比了好一阵，他喵的还是总结一下比较好。</p>\n<p><strong>PS:以下代码及相当一部分内容来源于 《javascript设计模式与开发实践》——曾探  ，非完全原创！</strong></p>\n<h2 id=\"什么是单例模式\">什么是单例模式</h2>\n<p><strong>“保证一个类有且仅有一个实例，并提供一个访问他的全局访问点”。</strong></p>\n<h2 id=\"标准的单例模式\">标准的单例模式</h2>\n<p>原理很简单，就是用一个变量来标志当前是否为某个类创建过对象，如果创建过，下一次获取该类的实例时，直接返回该对象：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Singleton</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">instance</span> <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">getInstance</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">instance</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">instance</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sven1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sven2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n</code></pre>\n<p>或者：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Singleton</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">getInstance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这两种方法都是通过getInstance方法来获取唯一对象，不过缺点很明显，如果这个类使用者使用new方法创建实例，还是会有新的实例产生。</p>\n<h2 id=\"js的单例模式\">JS的单例模式</h2>\n<p>JS其实本身没有提供类的实现方法，当然在ES6中我们可以使用CLASS了，不过这只是语法糖而已，并非是新的继承模型，那我们其实可以搞一些JS特色的单例模式啊。</p>\n<h3 id=\"全局变量\">全局变量？</h3>\n<p>全局变量当然不是单例模式，但是我们其实常常这么用，比如<code>var a = {};</code>，这样创建对象自然是独一无二的，不过全局变量容易造成命名空间污染，对此我们可以使用命名空间：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> namespace1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">a</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>或使用闭包：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> __name <span class=\"token operator\">=</span> <span class=\"token string\">'sven'</span><span class=\"token punctuation\">,</span>\n        __age <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">getUserInfo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> __name <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> __age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"惰性单例\">惰性单例</h3>\n<p>惰性单例就是指在需要时才创建对象实例，上文的代码其实就是惰性单例了，但是实在是不够抽象，我们可以分离出真正interesting的部分：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getSingle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> result <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>注意是创建对象的方法被当成参数传入getSingle函数，在让getSingle返回一个新的**函数！**并且用result返回fn的计算结果，因为result在闭包中，所以不会被销毁，一个完整的例子：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createLoginLayer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token string\">'我是登录浮窗'</span><span class=\"token punctuation\">;</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">display</span> <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> div<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> createSingleLoginLayer <span class=\"token operator\">=</span> <span class=\"token function\">getSingle</span><span class=\"token punctuation\">(</span>createLoginLayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loginBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> loginLayer <span class=\"token operator\">=</span> <span class=\"token function\">createSingleLoginLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    loginLayer<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">display</span> <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"最疼的方法重写构造函数\">最疼的方法——重写构造函数</h2>\n<p>这个方法是在<a href=\"https://cnodejs.org/topic/520dc59899f5db772c01ce1f\" target=\"_blank\" rel=\"nofollow\">这篇博客</a>看到的，给人一种《逃生2》的断子绝孙之感：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Person</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//缓存实例 </span>\n    <span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//重写构造函数 </span>\n    <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Person</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> instance<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//保留原型属性 </span>\n    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//实例 </span>\n    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//重置构造函数引用 </span>\n    instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Person</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//其他初始化 </span>\n    instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">createTime</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>简单的来说就是构造函数第一次调用时，一开始就直接改写自身的构造函数令其将来执行时直接返回实例，再有条不紊地保留<strong>原型属性</strong>与<strong>构造函数引用</strong>（否则一旦对象被创建，其原型将被改变），最后再开始构造实例的工作，实在太优雅（而且感觉很疼）了[茶]。</p>\n<hr>\n<p>诶～设计模式真是四国一啊ᕕ ( ᐛ ) ᕗ</p>\n</body></html>","description":"单例模式应该是我最早接触的设计模式之一，尽管如此，前两天在写IFE的任务时还是懵比了好一阵，他喵的还是总结一下比较好。......"},"__N_SSG":true}
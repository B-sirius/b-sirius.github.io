{"pageProps":{"id":"how-to-clone-object-in-js","title":"js对象克隆之谜","date":"2017-08-26","htmlText":"<html><head></head><body><h2 id=\"先谈谈深拷贝\">先谈谈深拷贝</h2>\n<p>如何在js中获得一个克隆对象，可以说是喜闻乐见的话题了。相信大家都了解引用类型与基本类型，也都知道有种叫做深拷贝的东西，传说深拷贝可以获得一个克隆对象！那么像我这样的萌新自然就去学习了一波，我们能找到的代码基本都是这样的：</p>\n<h3 id=\"低配版深拷贝\">低配版深拷贝</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">deepClone</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currobj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> currobj <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> currobj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>currobj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> newobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> newobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> currobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> currobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            newobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> currobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">{</span>\n            newobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>currobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> newobj\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>啧啧真是很精巧啊！对于Array和普通Object都做了区分。但是显然，借助递归实现的深拷贝如果要克隆层级很多的复杂对象，容易造成内存溢出，咱可以做出一个小小改进：</p>\n<h3 id=\"看起来酷一点的深拷贝\">看起来酷一点的深拷贝</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">deepClone</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currobj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> currobj <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> currobj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>currobj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> newobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> newobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> currQue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>currobj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> newQue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>newobj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//关键在这里</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>currQue<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> currQue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>obj2 <span class=\"token operator\">=</span> newQue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">{</span>\n                    obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 妙啊</span>\n                currQue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                newQue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> newobj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这里利用了两个队列，还算优雅的避免了递归的弊端。</p>\n<h3 id=\"json序列化\">JSON序列化</h3>\n<p>还有一种方法是利用JSON的内置方法，即所谓的JSON序列化：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">deepClone</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> str<span class=\"token punctuation\">,</span> newobj <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span> <span class=\"token operator\">===</span> <span class=\"token known-class-name class-name\">Array</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        str <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//系列化对象</span>\n        newobj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//还原</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            newobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> \n            <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> newobj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>不过不打紧，它与上面方法的效果基本相同。</p>\n<h3 id=\"上面几种深拷贝的局限\">上面几种深拷贝的局限</h3>\n<p>拜托，大家都很懂对象，上面的方法有几个很大的问题：</p>\n<ul>\n<li>遇到对象内部的<strong>循环引用</strong>直接gg</li>\n<li>无法拷贝<strong>函数</strong>（typeof 函数 得到的是 'function'），函数仍是引用类型</li>\n<li>无法正确保留<strong>实例对象的原型</strong></li>\n</ul>\n<p>于是，我们就要开始改造上面的深拷贝方法来进行完美的克隆了！.............么？</p>\n<h2 id=\"等下你到底要啥\">等下，你到底要啥</h2>\n<p>克隆克隆，我们平常把它挂在嘴上，但面对一个对象，我们真正想克隆的是什么？我想在99%的情况下，我们想克隆的是对象的<strong>数据</strong>，而保留它的<strong>原型引用</strong>和<strong>方法引用</strong>，因此上面提到的局限中的第二点，基本可以不考虑。现在咱再来看看怎么解决剩下两点。</p>\n<h2 id=\"解决循环引用\">解决循环引用</h2>\n<p>首先搞清什么是循环引用，常见的循环引用有两种：</p>\n<h3 id=\"自身循环引用\">自身循环引用</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">_self</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这种循环引用可以说很是常见。</p>\n<h3 id=\"多个对象互相引用\">多个对象互相引用</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">brother</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span><span class=\"token property-access\">brother</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>也不是没见过，不过这是典型导致对象内存无法被回收的写法，本身就不推荐。</p>\n<h3 id=\"解决之道\">解决之道</h3>\n<p>目前只找到了针对第一种引用的解决方法，来自于Jquery源码：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">jQuery<span class=\"token punctuation\">.</span><span class=\"token property-access\">extend</span> <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span><span class=\"token property-access\">fn</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">extend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// options是一个缓存变量，用来缓存arguments[i]</span>\n  <span class=\"token comment\">// name是用来接收将要被扩展对象的key</span>\n  <span class=\"token comment\">// src改变之前target对象上每个key对应的value</span>\n  <span class=\"token comment\">// copy传入对象上每个key对应的valu</span>\n  <span class=\"token comment\">// copyIsArray判定copy是否为一个数组</span>\n  <span class=\"token comment\">// clone深拷贝中用来临时存对象或数组的src</span>\n  <span class=\"token keyword\">var</span> options<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">,</span> copyIsArray<span class=\"token punctuation\">,</span> clone<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  length <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">,</span>\n  deep <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 处理深拷贝的情况</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    deep <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n    target <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//跳过布尔值和目标 </span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 控制当target不是object或者function的情况</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>jQuery<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFunction</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 当参数列表长度等于i的时候，扩展jQuery对象自身</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 扩展基础对象</span>\n      <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>name <span class=\"token keyword\">in</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        src <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\n        copy <span class=\"token operator\">=</span> options<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 防止永无止境的循环，这里举个例子，如var i = {};i.a = i;$.extend(true,{},i);如果没有这个判断变成死循环了</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> copy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>deep <span class=\"token operator\">&#x26;&#x26;</span> copy <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isPlainObject</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>copyIsArray <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>copyIsArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            copyIsArray <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            clone <span class=\"token operator\">=</span> src <span class=\"token operator\">&#x26;&#x26;</span> jQuery<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> src<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果src存在且是数组的话就让clone副本等于src否则等于空数组。</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            clone <span class=\"token operator\">=</span> src <span class=\"token operator\">&#x26;&#x26;</span> jQuery<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isPlainObject</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> src<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果src存在且是对象的话就让clone副本等于src否则等于空数组。</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\">// 递归拷贝</span>\n          target<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extend</span><span class=\"token punctuation\">(</span>deep<span class=\"token punctuation\">,</span> clone<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>copy <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          target<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若原对象存在name属性，则直接覆盖掉；若不存在，则创建新的属性。</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 返回修改的对象</span>\n  <span class=\"token keyword control-flow\">return</span> target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"解决原型的引用\">解决原型的引用</h2>\n<p>在我们想办法魔改深拷贝时，先看下以上这么多深拷贝的基本原理：</p>\n<p><strong>利用for-in循环遍历对象属性，如果属性值是对象则深拷贝，不是则直接赋值</strong></p>\n<p>于是俺眉头一皱发现事情并不简单，俺上一篇博客已经说明：<strong>for-in遍历的是对象以及其原型链上可枚举属性</strong>，因此想在遍历时对源对象的<code>__proto__</code>做手脚是根本不存在的，<strong><code>__proto__</code>以及它的不可枚举属性根本不会被遍历到</strong>。可以通过下面的例子看出：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">deepClone</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 随便从上面拿一个</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">log</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A {val: 1}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {val: 1, log: function(){...}}</span>\n</code></pre>\n<p>因此，一个解决方法很单纯，就是像上面的jQuery.extend方法一样，<strong>自己传入拷贝的目标对象</strong>，extend方法本质上只是<strong>拓展目标对象的属性，使其获得源对象上的数据</strong>，这样一来只要我们先创建好符合需求的目标对象即可。</p>\n<p>另一种方法则是不采用深拷贝，<strong>直接取出需要进行拷贝的对象的数据，然后再利用这份数据来实例化和设置一个新的对象出来</strong>：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Foo</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">obj</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">sex</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">sex</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">toJSON</span> <span class=\"token operator\">=</span> <span class=\"token function\">funciton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">sex</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bandit\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fooCopy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>问题同样得到解决【鼓掌】</p>\n<hr>\n<p>回顾一下，没有哪种方法是万用的魔法 —— 在我们想要获得一个克隆对象之前，或许最好先搞清楚我们到底是在克隆什么，再采用最适合的方法。而非是拘泥于“深拷贝浅拷贝”的说法，去复制一段代码祈祷他能生效。我相信以上的示例代码还没有考虑到克隆对象的所有问题，但它们在合适的场景下能够处理合适的问题。嗯，其实很多事情都是这样蛤【带！】</p>\n</body></html>","description":"如何在js中获得一个克隆对象，可以说是喜闻乐见的话题了。相信大家都了解引用类型与基本类型，也都知道有种叫做深拷贝的东西，传说深拷贝可以获得一个克隆对象！那么像我这样的萌新自然就去学习了一波，我们能找到......"},"__N_SSG":true}
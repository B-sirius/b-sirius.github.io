{"pageProps":{"id":"image-processing-water-ripple","title":"图像处理初见！——水波纹","date":"2018-06-12","htmlText":"<html><head></head><body><p>水波纹效果的实现方法其实相当多，今天俺想讨论的一种是利用算法（就是说依照某种规则将图像的像素乱搞一通，看起来就像波纹一样！）来进行处理的，不借助波纹图片等等，因此有很高的可定制性。</p>\n<p><strong>WARNING——本文中的demo未做足够优化，不建议使用手机查看</strong></p>\n<h2 id=\"首先来看一眼效果\">首先来看一眼效果</h2>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YvVypN\" data-default-tab=\"js,result\" data-user=\"padfoot_07\" data-embed-version=\"2\" data-pen-title=\"water ripple\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/padfoot_07/pen/YvVypN/\" target=\"_blank\" rel=\"nofollow\">water ripple</a> by Zhouyi (<a href=\"https://codepen.io/padfoot_07\" target=\"_blank\" rel=\"nofollow\">@padfoot_07</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"nofollow\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>【伤害大家的眼睛使我快乐】</p>\n<h2 id=\"那么这么好的算法是什么呢\">那么，这么好的算法是什么呢?</h2>\n<h3 id=\"不准确的大概描述\">不准确的大概描述</h3>\n<p>在具体介绍策略之前，俺先模糊的描述一下这个策略的思想：</p>\n<p>水波纹本质上是像素有规律的发生<strong>偏移（offset）<strong>造成的视觉效果，且这个偏移连续进行，看起来才会像是水波扩散、荡漾一样。因此在我们试图将这种偏移作用到图像（一堆像素）上之前，首先思考的是一连串的数值变化；我们为图像的每一个像素都赋予一个数值，来代表它在“水波纹”作用下的状态。而这个变化要具有连续性，我们要不停记录</strong>当前</strong>和<strong>上一帧渲染</strong>的状态，再依据某种策略使其状态的改变自发进行下去。之后再<strong>依据每个像素的状态信息，计算出它的偏移</strong>。</p>\n<h3 id=\"具体策略\">具体策略</h3>\n<p>假设我们处理的是100*100的图像，这个策略大概分为这么几步：</p>\n<ol>\n<li>\n<p>记录水波纹**当前（current）<strong>和</strong>上一帧渲染时（previous）**的状态信息。就像我们上文提的一样，这里的信息是对应每个像素的，因此俺就使用了两个数组来记录，长度都为10000（100*100，对应像素顺序是按照一行一行排列</p>\n<p>，从左向右，从上向下），均初始化为0。</p>\n</li>\n<li>\n<p>每一帧，都利用previous对current进行混合（这里似乎是一种<strong>卷积</strong>计算，然而俺的高数不好，可自行了解），并交换两者，具体如下：</p>\n<ul>\n<li>\n<p>对于每个像素的current值（为了方便，边缘像素这里不处理），将其previous中的邻居像素（比如它的上下左右四个像素）的状态数值相加，除以2，减去current中的数值——当然我知道你听不懂，所以画了个图：</p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/%E6%B3%A2%E7%BA%B9%E7%AD%96%E7%95%A5.png\" alt=\"策略\"></p>\n</li>\n<li>\n<p>等等！根据常识，波纹的扩散（塌陷）幅度会之间减小，因此我们还需要一个阻尼来减小current值，最简单的方法就是每帧都乘以一个小于1的值。</p>\n</li>\n<li>\n<p>PS: 当然，咱肯定会想，这他喵是什么个原理？虽然我也不知道是哪位大神想出的算法（这个算法的使用相当广泛，以至于我参考的不同实现样例都不约而同得使用了该算法），但是至少咱可以可视化这个过程，康康到底发生了什么：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rKymEg\" data-default-tab=\"js,result\" data-user=\"padfoot_07\" data-embed-version=\"2\" data-pen-title=\"水波纹策略-可视化\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/padfoot_07/pen/rKymEg/\" target=\"_blank\" rel=\"nofollow\">水波纹策略-可视化</a> by Zhouyi (<a href=\"https://codepen.io/padfoot_07\" target=\"_blank\" rel=\"nofollow\">@padfoot_07</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"nofollow\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>这里demo将每个像素的current值直接作为rgb值赋予了像素，数值越高的像素看起来越“亮”，可以直观的看出数值的变化就是波纹状。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>接下来我们可以准备处理图像了，首先自然是获得图像的像素信息，比如我使用的p5.js，提供<code>loadPixels()</code>这样的api便可如字面意义获得图像所有的像素信息，数据结构大概是这样：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 如100*100的图片，像素数据的顺序按照一行一行排列，共100*100*4个元素</span>\n    <span class=\"token comment\">// 第一个像素的rgba</span>\n    <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// r</span>\n    <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// g</span>\n    <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// b</span>\n    <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// a</span>\n    <span class=\"token comment\">// 第二个像素的rgba</span>\n    <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">55</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">213</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">255</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ......</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>当然你也可以定义自己习惯的数据格式。</p>\n</li>\n<li>\n<p>现在我们需要根据current值来决定图像像素的偏移量offset了。说实话，这一步俺们有很大的自主权，参数以及函数的选择可以带来不同的效果。简单的来说，current值越高意味着水波越高，“折射”越明显，偏移值越大。</p>\n</li>\n<li>\n<p>在最后，我们需要互换current和previous数组，准备开始下一轮计算。</p>\n</li>\n<li>\n<p>基本是到这一步就结束了——但显然我们还差一个关键步骤，就是触发波纹。上文在初始化current和previous时初始化是0，如果我们不去改变，偏移值自然也一直是0。想要在某个位置触发“水波纹”，只需改变该像素的previous值便可，随后每帧进行的计算会推动波纹的产生。除此之外，还可做一些水波在图像边缘碰撞的检测使效果更加真实。</p>\n</li>\n<li>\n<p>大概的代码，具体可查看最上方的样例：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token spread operator\">...</span>\n<span class=\"token comment\">// 触发波纹</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    previous<span class=\"token punctuation\">[</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token comment\">// 每一帧绘制</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">loadPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 循环非边缘的对象</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&#x3C;</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                previous<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n                previous<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n                previous<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n                previous<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> dampening<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token spread operator\">...</span>\n\n            <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token operator\">-</span> current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 获得偏移值</span>\n            <span class=\"token keyword\">let</span> xoffset <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> data <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> yoffset <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> data <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 边缘检查</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>xoffset <span class=\"token operator\">>=</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span> xoffset <span class=\"token operator\">=</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>xoffset <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> xoffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>yoffset <span class=\"token operator\">>=</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">)</span> yoffset <span class=\"token operator\">=</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>yoffset <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> yoffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 根据偏移值获得偏移下标</span>\n            <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> newIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xoffset <span class=\"token operator\">+</span> yoffset <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n            pixels<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> imagePixelsCopy<span class=\"token punctuation\">[</span>newIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            pixels<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> imagePixelsCopy<span class=\"token punctuation\">[</span>newIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            pixels<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> imagePixelsCopy<span class=\"token punctuation\">[</span>newIndex <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">updatePixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 交换current与previous</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> previous<span class=\"token punctuation\">;</span>\n    previous <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    current <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n</ol>\n<h2 id=\"历史考察\">历史考察</h2>\n<p>在写这篇水文查阅资料时，发现有几篇文章都指向了一个现在无法打开的地址，好在<a href=\"https://archive.org/\" target=\"_blank\" rel=\"nofollow\">archive</a>存有快照，这是篇98年的博客，作者对于算法的原理及应用都有很好的介绍，很建议阅读，这里是<a href=\"https://web.archive.org/web/20160607052007/http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\" target=\"_blank\" rel=\"nofollow\">地址</a>。</p>\n<hr>\n<p>我什么都不想做，我只想玩赛博朋克2077.jpg</p>\n</body></html>","description":"水波纹效果的实现方法其实相当多，今天俺想讨论的一种是利用算法（就是说依照某种规则将图像的像素乱搞一通，看起来就像波纹一样！）来进行处理的，不借助波纹图片等等，因此有很高的可定制性。......"},"__N_SSG":true}
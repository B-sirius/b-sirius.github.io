{"pageProps":{"id":"apple-login-with-flutter-in-ios","title":"Sign in with apple by Flutter in iOS","date":"2023-03-02","htmlText":"<html><head></head><body><p>Sign in with Apple is commonly used by modern apps now, this article will introduce a way to implement it with Flutter for iOS apps.</p>\n<ul>\n<li><a href=\"#intro\">Intro</a>\n<ul>\n<li><a href=\"#flow\">Flow</a></li>\n<li><a href=\"#used-packages\">Used Packages</a></li>\n<li><a href=\"#docs\">Docs</a></li>\n</ul>\n</li>\n<li><a href=\"#steps\">Steps</a>\n<ul>\n<li><a href=\"#1-settings-on-the-apple-developer-page\">1. Settings on the Apple Developer page</a>\n<ul>\n<li><a href=\"#editcreate-identifier\">edit/create Identifier</a></li>\n<li><a href=\"#create-private-key\">create private key</a></li>\n</ul>\n</li>\n<li><a href=\"#2-settings-in-xcode\">2. Settings in Xcode</a></li>\n<li><a href=\"#3-logic-in-the-client-side\">3. Logic in the Client side</a></li>\n<li><a href=\"#4-logic-in-the-app-service-side\">4. Logic in the App Service side</a>\n<ul>\n<li><a href=\"#create-client-secret\">create client secret</a></li>\n</ul>\n</li>\n<li><a href=\"#get-authorization-token\">get authorization token</a></li>\n</ul>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<h2 id=\"intro\">Intro</h2>\n<p>Here I will introduce the Apple login flow in iOS, which is <strong>based on the authorization code.</strong></p>\n<p>There should be another way to use the identity token and Apple public key to do the same job, but we didn’t put it into practice, so for now I won’t cover it.</p>\n<h3 id=\"flow\">Flow</h3>\n<p>The iOS apple login flow is not bounded with flutter tech (Apple login in Android or Web has more steps than this and is not introduced here).</p>\n<p><img src=\"https://s2.loli.net/2023/03/02/IhVbdx2l3JFeP56.png\" alt=\"apple login in iOS\"></p>\n<h3 id=\"used-packages\">Used Packages</h3>\n<ul>\n<li>Flutter\n<ul>\n<li><a href=\"https://pub.dev/packages/sign_in_with_apple\" target=\"_blank\" rel=\"nofollow\">sign_in_with_apple</a>. Flutter bridge to Sign in with Apple.</li>\n</ul>\n</li>\n<li>Node\n<ul>\n<li><a href=\"https://www.npmjs.com/package/apple-signin-auth\" target=\"_blank\" rel=\"nofollow\">apple-signin-auth</a>. Apple sign in for Node.js.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens\" target=\"_blank\" rel=\"nofollow\">Apple Developer Documentation</a></li>\n</ul>\n<h2 id=\"steps\">Steps</h2>\n<h3 id=\"1-settings-on-the-apple-developer-page\">1. Settings on the Apple Developer page</h3>\n<p><strong>A paid apple developer membership account is required for this step!</strong></p>\n<p>In this step, we need to setup two things:</p>\n<ul>\n<li>an identifier that configures the App capabilities.</li>\n<li>create a private key.</li>\n</ul>\n<h4 id=\"editcreate-identifier\">edit/create Identifier</h4>\n<p>Visit <a href=\"https://developer.apple.com/account/resources/certificates/list\" target=\"_blank\" rel=\"nofollow\">Certificates, Identifiers &#x26; Profiles</a>. Choose “<a href=\"https://developer.apple.com/account/resources/identifiers/list\" target=\"_blank\" rel=\"nofollow\">Identifiers</a>“ and create/edit the APP’s identifier. Make sure “Sign in with Apple“ is selected in Capabilities.</p>\n<p><img src=\"https://s2.loli.net/2023/03/02/KQPRUTC1rdqVnyu.jpg\" alt=\"sign in with apple\"></p>\n<p>After the identifier is created, it will show <strong>team ID</strong> and <strong>bundle ID</strong>.</p>\n<p>we can also find team ID on <a href=\"https://developer.apple.com/account\" target=\"_blank\" rel=\"nofollow\">account page</a>.</p>\n<h4 id=\"create-private-key\">create private key</h4>\n<p>Choose “<a href=\"https://developer.apple.com/account/resources/authkeys/list\" target=\"_blank\" rel=\"nofollow\">keys</a>“ and register a new key, also make sure “Sign in with Apple“ is selected.</p>\n<p><img src=\"https://s2.loli.net/2023/03/02/HdgeWFJ5iU18lPQ.jpg\" alt=\"\"></p>\n<p>Then select the Primary app ID as the identifier bundle ID we just edited/selected.</p>\n<p><img src=\"https://s2.loli.net/2023/03/02/14Mr82uSjNiplna.jpg\" alt=\"\"></p>\n<p>After it’s registered, it will provide a <strong>one-time</strong> download link to download the <strong>private key</strong> file.</p>\n<p>Also, it has a <strong>key ID</strong>.</p>\n<p><img src=\"https://s2.loli.net/2023/03/02/J1hN4YLM38aIUog.jpg\" alt=\"\"></p>\n<h3 id=\"2-settings-in-xcode\">2. Settings in Xcode</h3>\n<p>Open App project, Select “Target-Runner-Signing &#x26; Capabilities“ and add “Sign in with Apple“ Capability.</p>\n<p><img src=\"https://s2.loli.net/2023/03/02/zn9LjGBDYqpmJSk.jpg\" alt=\"\"></p>\n<p>Open “Signing“ tab and select the developer team ID and bundle ID.</p>\n<p><img src=\"https://s2.loli.net/2023/03/02/s4G7wMlEqYRf8Xk.jpg\" alt=\"\"></p>\n<h3 id=\"3-logic-in-the-client-side\">3. Logic in the Client side</h3>\n<p>We are using flutter to build our App, and the package <a href=\"https://pub.dev/packages/sign_in_with_apple\" target=\"_blank\" rel=\"nofollow\">sign_in_with_apple</a> will help integrate with Apple service to get the credential we need. It’s usage is very straightforward so just check the <a href=\"https://pub.dev/packages/sign_in_with_apple#example-usage\" target=\"_blank\" rel=\"nofollow\">example</a>. And in the end, you will get a credential that contains the authorization code. It will be the key parameter for our App login API.</p>\n<h3 id=\"4-logic-in-the-app-service-side\">4. Logic in the App Service side</h3>\n<p>The APP service will handle most part of the work. We are using node.js and the package <a href=\"https://www.npmjs.com/package/apple-signin-auth\" target=\"_blank\" rel=\"nofollow\">apple-signin-auth</a>.</p>\n<p>In this step, we only focus on two parts:</p>\n<ul>\n<li>create client secret</li>\n<li>get authorization token</li>\n</ul>\n<h4 id=\"create-client-secret\">create client secret</h4>\n<p>Before we can ask Apple service for an authorization token, we need a “client secret“, which is a JWT used for each validation request between our server and apple service. if we check the <a href=\"https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens#3262048\" target=\"_blank\" rel=\"nofollow\">doc</a> for details, we will see Apple requests the JWT be signed with a specific algorithm. So the <a href=\"https://www.npmjs.com/package/apple-signin-auth\" target=\"_blank\" rel=\"nofollow\">apple-signin-auth</a> do us a favor, just use appleSignin.getClientSecret with the right parameters:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> clientSecret <span class=\"token operator\">=</span> appleSignin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getClientSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">clientID</span><span class=\"token operator\">:</span> <span class=\"token string\">'com.company.app'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Apple Client ID, AKA Bundle ID</span>\n  <span class=\"token literal-property property\">teamID</span><span class=\"token operator\">:</span> <span class=\"token string\">'teamID'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Apple Developer Team ID.</span>\n  <span class=\"token literal-property property\">privateKey</span><span class=\"token operator\">:</span> <span class=\"token string\">'PRIVATE_KEY_STRING'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// private key associated with your client ID. -- Or provide a `privateKeyPath` property instead.</span>\n  <span class=\"token literal-property property\">keyIdentifier</span><span class=\"token operator\">:</span> <span class=\"token string\">'XXXXXXXXXX'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// identifier of the private key. AKA key ID. - can be found here https://developer.apple.com/account/resources/authkeys/list</span>\n  <span class=\"token comment\">// OPTIONAL</span>\n  <span class=\"token literal-property property\">expAfter</span><span class=\"token operator\">:</span> <span class=\"token number\">15777000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Duration after which to expire JWT</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"get-authorization-token\">get authorization token</h3>\n<p>This part is straightforward. Just call the API and Apple service will return the authorization token. We can check the <a href=\"https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens#url\" target=\"_blank\" rel=\"nofollow\">doc</a> and as always, <a href=\"https://www.npmjs.com/package/apple-signin-auth\" target=\"_blank\" rel=\"nofollow\">apple-signin-auth</a> wrapped it as a function to call:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">clientID</span><span class=\"token operator\">:</span> <span class=\"token string\">'com.company.app'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Apple Client ID, AKA Bundle ID</span>\n  <span class=\"token literal-property property\">redirectUri</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:3000/auth/apple/callback'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// We don't need it in our login flow.</span>\n  <span class=\"token literal-property property\">clientSecret</span><span class=\"token operator\">:</span> clientSecret\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tokenResponse <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> appleSignin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAuthorizationToken</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Once our App Service gets the authorization token, we can do our business logic, like getting the user info, which shouldn’t be a problem.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>So this is the way to support Apple login <strong>based on the authorization code in</strong> <strong>iOS</strong>. Just remember there are other ways and more to set up if you want to support Android or Web.</p>\n</body></html>","description":"Sign in with Apple is commonly used by modern apps now, this article will introduce a way to impleme......"},"__N_SSG":true}
{"pageProps":{"id":"uses-of-perlin-noise-in-animation","title":"柏林噪声（perlin noise）都是怪物么！","date":"2018-03-30","htmlText":"<html><head></head><body><h2 id=\"前言\">前言</h2>\n<p>不知道各位有没有见过这样歪歪扭扭的动画效果，非常有趣不是么：</p>\n<p><img src=\"https://p3zihuryc.bkt.clouddn.com/blogImg/twisted_line.gif\" alt=\"wow\"></p>\n<p>所以要如何实现这样的效果呢——“随机！”，是的，我反正是这么想的，于是一个Math.random()怼上去，结果是线条像抽风一样扭成一团.....自然，线条是由控制点连接起来的，对其叠加一个随机数，前后联系的线条自然会显得支离破碎，或者说：“不自然”。就如同现实中的海浪、云朵、山脉地形一样，他们看起来都是<strong>随机</strong>的，却又有一种<strong>连续性</strong>！但是，为了应用到计算机图像中，我们要如何抽象这样的现象呢！</p>\n<h2 id=\"柏林噪声perlin-noise与分形噪声\">柏林噪声（perlin noise）与分形噪声！</h2>\n<p>如果你想看的话，这里是<a href=\"https://zh.wikipedia.org/wiki/Perlin%E5%99%AA%E5%A3%B0\" target=\"_blank\" rel=\"nofollow\">柏林噪声的定义</a>！</p>\n<p>看得懂吗？看不懂吧，到了俺的画画时间！</p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/%E4%B8%80%E7%BB%B4%E6%9B%B2%E7%BA%BF.png\" alt=\"一维曲线\"></p>\n<p>上面有三张图，姑且称为图一（左上）图二（左下）图三（右）好了（画的时候怎么不标好啊！）。</p>\n<p>图一是这样画出来的：<strong>在一维坐标轴上，选择等距的无穷个点（这里就假设为整数啦），将空间划分为等长的线段，为每个点随机指定一个值（这个值的范围就是振幅amplitude）和一个梯度（在一维上，梯度就是斜率没错！）</strong>。然后“对于坐标值为整数的点，将该点对应的值作为噪声图像上该点的值；对于坐标值不为整数的点，将相邻两点的值和<strong>根据梯度进行<a href=\"https://zh.wikipedia.org/wiki/%E6%8F%92%E5%80%BC\" target=\"_blank\" rel=\"nofollow\">插值</a>运算</strong>，获得该点的值”——这个图像在地球人看来，就是一堆点舒舒服服地给他们平滑连接起来。而这，就是一维柏林噪声图像，全剧终。</p>\n<p>喂等等！标题不是这么写的啊！！</p>\n<p>好吧，图二也一样是柏林噪声的一维图像，只不过取点的间隔更小（也就是频率更高），振幅也更小而已，但是你也看到那张融合卡了吧！没错，通过叠加更高频率的柏林噪声，我们就可以得到图三那样效果更复杂的图像，也更加符合自然界中海岸线，地形，海浪等特征，顺带一提，我们一直形容的很模糊的特征有个术语，叫<a href=\"https://zh.wikipedia.org/wiki/%E8%87%AA%E7%9B%B8%E4%BC%BC\" target=\"_blank\" rel=\"nofollow\">自相似</a>！</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/65/Kochsim.gif\" alt=\"自相似科赫曲线\"></p>\n<h2 id=\"二维\">二维</h2>\n<p>关于具体算法，仍是在一维的基础上进行衍生：</p>\n<ol>\n<li>为所有坐标为<code>(x, y)</code> 且<code>x, y</code>都是整数的点指定一个值，同时指定一个<a href=\"https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6\" target=\"_blank\" rel=\"nofollow\">梯度</a>，这些点将空间分成方格；</li>\n<li>对于坐标轴为整数的点，即上述方格的顶点，将为它指定的值作为该点的值；对于某个方格内部的点<code>(x, y)</code>，用所在方格四个顶点的值和<a href=\"https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6\" target=\"_blank\" rel=\"nofollow\">梯度</a>进行插值。</li>\n</ol>\n<p>但没人看得懂这玩意儿不是么，那直接感受下：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LdzLXR\" data-default-tab=\"js,result\" data-user=\"padfoot_07\" data-embed-version=\"2\" data-pen-title=\"perlin noise-two dimensional\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/padfoot_07/pen/LdzLXR/\" target=\"_blank\" rel=\"nofollow\">perlin noise-two dimensional</a> by Zhouyi (<a href=\"https://codepen.io/padfoot_07\" target=\"_blank\" rel=\"nofollow\">@padfoot_07</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"nofollow\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>左侧是二维柏林噪声，右侧是纯随机，所以二维图像中的每个点看起来都<strong>受其周围点的影响</strong>，这有些类似于云不是么233</p>\n<h2 id=\"让我见识一下吧noise的性能\">让我见识一下吧，noise的性能</h2>\n<p>不要被上述图像束缚了思考，经典柏林噪声建议使用<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/ed5b799e7d9cd423db6f533050ddfda181b4850b\" alt=\"{\\displaystyle 6t^{5}-15t^{4}+10t^{3}}\">作为插值函数，但这并不妨碍俺们使用其他函数，如（图像来源：<a href=\"https://zhuanlan.zhihu.com/p/22337544\" target=\"_blank\" rel=\"nofollow\">不只是噪音</a>）：</p>\n<p>使用<strong>指数</strong>插值</p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/%E6%8F%92%E5%80%BC1.jpg\" alt=\"指数插值\"></p>\n<p>使用<strong>三角函数</strong>插值</p>\n<p><img src=\"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/%E6%8F%92%E5%80%BC2.jpg\" alt=\"三角函数插值\"></p>\n<p>我们还可以对其进行<strong>叠加</strong>，总之可能性是无限的啊！</p>\n<h2 id=\"实际运用\">实际运用</h2>\n<p>以上我们仅仅是对噪声数值本身进行了可视化，事实上对于其特性的使用，完全可以放飞自我啊！</p>\n<p>（以下建议使用pc浏览）</p>\n<p>比如将其作为速度场影响粒子流动：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"XEePJb\" data-default-tab=\"js,result\" data-user=\"padfoot_07\" data-embed-version=\"2\" data-pen-title=\"perlin noise-flow\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/padfoot_07/pen/XEePJb/\" target=\"_blank\" rel=\"nofollow\">perlin noise-flow</a> by Zhouyi (<a href=\"https://codepen.io/padfoot_07\" target=\"_blank\" rel=\"nofollow\">@padfoot_07</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"nofollow\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>模拟波浪：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dXzmYQ\" data-default-tab=\"js,result\" data-user=\"arnaudrocca\" data-embed-version=\"2\" data-pen-title=\"Water shader\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arnaudrocca/pen/dXzmYQ/\" target=\"_blank\" rel=\"nofollow\">Water shader</a> by Arnaud Rocca (<a href=\"https://codepen.io/arnaudrocca\" target=\"_blank\" rel=\"nofollow\">@arnaudrocca</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"nofollow\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>浮夸的滤镜：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YePWqG\" data-default-tab=\"js,result\" data-user=\"Thibka\" data-embed-version=\"2\" data-pen-title=\"Fun with perlin\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/Thibka/pen/YePWqG/\" target=\"_blank\" rel=\"nofollow\">Fun with perlin</a> by Thibaut (<a href=\"https://codepen.io/Thibka\" target=\"_blank\" rel=\"nofollow\">@Thibka</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"nofollow\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>为了各位的流量考虑就不再多放辣，总之是很有搞头，相信都get到那个点了。</p>\n<hr>\n<p>当初想要实现这样的效果折腾了几天也没搞定，到底还是没能摸清其本质特征啊orz，好个大坑慢慢填......</p>\n</body></html>","description":"不知道各位有没有见过这样歪歪扭扭的动画效果，非常有趣不是么：......"},"__N_SSG":true}
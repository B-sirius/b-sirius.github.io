{"pageProps":{"id":"basics-about-xss-attack","title":"《试图了解XSS注入，却发现了奇妙的基础问题！》","date":"2017-09-26","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    h3: \"h3\",\n    strong: \"strong\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"啧，现在的轻小说起名真是浮夸【瞄】\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"web安全，xss注入，blablabla......相关的博文看了不少，感觉相当单纯，不就是\", _jsx(_components.code, {\n        children: \"<script>\"\n      }), \"嘛！转义嘛！结果自己尝试时又是喜闻乐见地发现，注入还没看多少，基础问题暴露一堆。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"注入入口-and-渲染方式\",\n      children: \"注入入口 and 渲染方式\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"xss注入实现的攻击，总的来说是：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"通过某种方式将需要执行的代码注入到服务器所存储的数据中\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"其他客户端从服务器拿到数据渲染时，执行了注入其中的代码\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"从某种意义上讲，这两步需要成功匹配，才能实现注入\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"耿直注入\",\n      children: \"耿直注入\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最容易想到的注入入口就是\", _jsx(_components.code, {\n        children: \"input\"\n      }), \"输入框，在这里就涉及到一个小知识点：\", _jsx(_components.strong, {\n        children: \"input输入框中的内容(value属性值)是转义后的值\"\n      }), \"。记好这一点嗯嗯。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"确定从 input 进行注入后，需要考虑的就是客户端的渲染方式了——咱尝试了以下几种方式：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"首先很想当然的，想通过设置 dom元素的**\", _jsx(_components.code, {\n          children: \"innerHTML\"\n        }), \"**属性进行渲染，然而…不行！\", _jsxs(_components.strong, {\n          children: [\"innerHTML的确会非常耿直的把标签啥的直接当作节点插入，但是插入后不会执行\", _jsx(_components.code, {\n            children: \"<script>内的内容\"\n          })]\n        }), \"，所以咱的脚本成功进入了客户端，却未被执行，可惜可惜。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"通过**\", _jsx(_components.code, {\n          children: \"appendChild()\"\n        }), \"**方法，是可以的！\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Jquery的**\", _jsx(_components.code, {\n          children: \"append()\"\n        }), \"**方法也是通过\", _jsx(_components.code, {\n          children: \"innerHTML\"\n        }), \"渲染，但它会试图找到\", _jsx(_components.code, {\n          children: \"script\"\n        }), \"标签，将其通过\", _jsx(_components.code, {\n          children: \"eval()\"\n        }), \"执行，所以当然是可以的。要是用这种方法渲染用户可以决定的字段，简直是二五仔啊！\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"防范\",\n      children: \"防范？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所以就像所有博文都会告诉你的防范方法：\", _jsxs(_components.strong, {\n        children: [\"转义 \", _jsx(_components.code, {\n          children: \"<\"\n        }), \"和\", _jsx(_components.code, {\n          children: \">\"\n        })]\n      }), \"，将其变为\", _jsx(_components.strong, {\n        children: \"html字符实体\"\n      }), \"，于是可喜可贺可喜可贺，这种方法可以毁灭性的摧毁用\", _jsx(_components.code, {\n        children: \"<script>\"\n      }), \"字符串进行注入的想法，以上三种渲染方式都不会中招。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"当然，道高一尺魔高一丈嘛，接下来博文就会告诉你，你可以用 \", _jsx(_components.strong, {\n        children: \"unicode码\"\n      }), \" 来表示  \", _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"<\"\n        })\n      }), \" 和 \", _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \">\"\n        })\n      }), \"，于是咱就迫不及待的在输入框中输入了伪装后的代码，然而它们却...直接被渲染出来了…没错，上面提到了，\", _jsx(_components.strong, {\n        children: \"input输入框中的内容(value属性值)是转义后的值\"\n      }), \"，你以为我是unicode码，其实我被已经转义啦（dio脸）！所以如果你想通过unicode码伪装，恐怕需要自己手动为请求数据赋值，比如从控制台手动请求接口。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"套路注入\",\n      children: \"套路注入\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"假设我们已经成功用unicode码发出了请求，结果是......并没有卵用？嗯？这和博文上说的不一样啊。根据粗浅的研究，似乎是因为咱是node服务器啊，unicode码在node环境下已经被表示为符号形式了？然后直接被上文的防范措施干掉了。不过似乎对于php服务器，unicode码是可以保持它原本的样子，成功绕过上文的防范成功注入。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"套路防范\",\n      children: \"套路防范\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"那么我们的解决方法是…没错，继续转义，这次要干掉的是 \", _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"\\\\\"\n        })\n      }), \",而在这里又意识到个很好笑的问题，因为咱不懂PHP，就试图在js中还原该场景。js中如何匹配字符串中的 \", _jsx(_components.code, {\n        children: \"\\\\\"\n      }), \" ？正则应该是 \", _jsx(_components.code, {\n        children: \"/\\\\\\\\/g\"\n      }), \"，因为 \", _jsx(_components.code, {\n        children: \"\\\\\"\n      }), \"是本身就是用于转义特殊符号的嘛，那我们可以转义的字符串呢？是这样的\", _jsx(_components.code, {\n        children: \"\\\"i want to replace \\\\\\\\\\\"\"\n      }), \"，这时才意识到这是个大乌龙啊！前面就说过了unicode码，如\", _jsx(_components.code, {\n        children: \"\\\"\\\\u003c\\\"\"\n      }), \"(\", _jsx(_components.code, {\n        children: \"<\"\n      }), \")，一旦在node环境中作为字符串出现，会被直接解释为\", _jsx(_components.code, {\n        children: \"\\\"<\\\"\"\n      }), \"，根本轮不到咱插手啊【扑通】。总之，经过一通令人窒息的操作之后，才真切意识到：\", _jsx(_components.strong, {\n        children: \"我们输入的字符，代码执行时所“看到”字符（手动比喻），和输出的字符\"\n      }), \"，很多时候是不一样的。\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"咱大胆的假设！如果假设真的有除了咱以外的人看这篇水文，会不会有种偏题的感觉？xss都没讲完啊喂，什么img标签onerror注入url注入都没讲诶！emmmmme可是咱在学习时的确会遇到这种“偏题”的情况，咱正是试图用水文的形式记录下这诡异的思路，而不是总结一遍早有无数博文总结的要点【蛤你就是懒】，就是这样！溜了溜了【逃】\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"description":"啧，现在的轻小说起名真是浮夸【瞄】......","usedCustomComponentNames":[]},"__N_SSG":true}
{"pageProps":{"id":"R-project-summary","title":"R项目小结","date":"2023-01-09","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    hr: \"hr\",\n    h2: \"h2\",\n    h3: \"h3\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    span: \"span\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"最近结束的一个项目有很多值得学习的地方，挑一些不敏感的在此记录。其中的每一点其实都有深入挖掘的空间，日后想必会再次遇到。\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"文档设计\",\n      children: \"文档设计\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有哪些文档可以整理归总？有的文档适合单独总结，有的适合放在Readme中，但总之，以下是一些可以考虑的点。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"系统设计文档\",\n      children: \"系统设计文档\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这里的设计指的是系统的架构，尤其要关注\", _jsx(_components.strong, {\n        children: \"系统之间是如何连接的\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而以下内容不应该被包含在其中：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"服务的具体细节。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"组件的设计模式。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"组件文档\",\n      children: \"组件文档\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"整理所有的组件/服务，可以有以下关注点：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"介绍\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"服务类型（比如SSR /Static）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"路由前缀\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"生产环境域名\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"预发环境域名\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"测试环境域名（规则）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"仓库地址\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"流水线地址\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"发布分支\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"涉及技术栈\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"开发者faq\",\n      children: \"开发者FAQ\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"目的是收集开发者关心的常见问题，比如项目如何本地启动，必要权限如何申请等。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"开发者验证指南\",\n      children: \"开发者验证指南\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"目的是保证开发者提交的组件可以在生产环境中运行，而不是完全依赖QA。常见的手段有测试用例，code review等，且很可能与CI/CD流程有关。个人觉得开发者很容易对一些小改动有迷之自信，结果却提交无法在测试环境运行的代码甚至搞崩线上。该步骤非常重要又容易被忽视。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"aws服务\",\n      children: \"AWS服务\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"aws服务太常见了，稍微记录一下我本次接触的，不至于一些名词都没有概念。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"ecs\",\n      children: \"ECS\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ECS is Amazon Elastic \", _jsx(_components.strong, {\n        children: \"Container Service\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Container Orchestration Service (容器编排工具）\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Manages the whole container lifecycle.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"start\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"re-schedule\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"load balance\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ECS Cluster（ECS集群）是Control Plane，管理所有运行着容器的虚拟机器。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://s2.loli.net/2023/01/09/u8ytTRfvmx7gk4n.jpg\",\n        alt: \"How does ECS work\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"而这些虚拟机是什么？是EC2 Instance，你还是需要管理这些Instance的，比如在增加container的时候，需要确保Instance的资源足够。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"但如果我们想在AWS上hosting infrastructure。可以用AWS Fargate。那就不需要手动管理Instance，他会根据你想要运行的container来自动分配资源。节省呀！\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"eks\",\n      children: \"EKS\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"EKS is Elastic \", _jsx(_components.strong, {\n        children: \"Kubernetes\"\n      }), \" Service.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Kubernetes 是ECS的竞品，非常Popular，所以EKS就是为了在AWS使用Kubernetes推出的。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"EKS的工作方式和ECS差不多。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"ecr\",\n      children: \"ECR\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ECR is Elastic \", _jsx(_components.strong, {\n        children: \"Container Registry\"\n      }), \", a private docker registry.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://s2.loli.net/2023/01/09/Lw6m7geKZ9A4YSW.png\",\n        alt: \"whole story, Jenkins involved here!\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"elb\",\n      children: \"ELB\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ELB is Elastic load balancing service.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://s2.loli.net/2023/01/09/EaFjZvJ731LDGRA.png\",\n        alt: \"负载均衡服务\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"使用这样一个 load balancer有很多好处\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"将流量分配给了很多下级实例\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"只暴露出一个入口（DNS）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"无缝处理下级应用的failures\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"对实例进行健康检查\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"提供https\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"强制使用cookies，所以用户可以访问到同一个instance\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"…\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"aws-lambda\",\n      children: \"AWS lambda\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这是一个Serverless服务，基本上可以理解为它提供了根据事件自动触发Function的能力。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其中事件可以指的是S3的内容变化，API的请求，或其他各种各样的AWS服务事件。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这里涉及到一个概念，Serverless，值得说一说。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我个人的理解是这样的：\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"首先Serverless并不是说没有Server，而是Server对用户不可见，which means：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"不需要手动管理server。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"会根据使用自动扩容。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"只有当被使用的时候，才会产生费用（而不是为Server本身付费）。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://s2.loli.net/2023/01/09/B2oTW3lrEuznZGK.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"环境变量\",\n      children: \"环境变量\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"环境变量-in-nextjs\",\n      children: \"环境变量 in Next.js\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before \", _jsx(_components.code, {\n        children: \"const HOST_NAME = 'www.sample.com'\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After \", _jsx(_components.code, {\n        children: \"const HOST_NAME = 'process.env.NEXT_PUBLIC_HOST_NAME'\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这里涉及到Next.js的一个特性：\", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser\",\n        children: \"expose env vars to the browser\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"During the \", _jsx(_components.strong, {\n          children: \"build stage\"\n        }), \", next.js will find these env vars start with \", _jsx(_components.strong, {\n          children: \"NEXT_PUBLIC_\"\n        }), \" and replace them with literal.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"build stage很关键，在CI/CD流程中，可能有build、release等多个环节，在哪里传入环境变量很关键。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Trick: 如果在一些情形下，我们需要把用于node端的环境变量暴露给浏览器，可以怎么做？\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Read these env vars inside \", _jsx(_components.code, {\n          children: \"getServerSideProps\"\n        }), \" and return them as props. \", _jsx(_components.a, {\n          href: \"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props#when-does-getserversideprops-run\",\n          children: \"More to read about it\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function-variable function\",\n          children: \"getServerSideProps\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// we can read server side env vars here.\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token literal-property property\",\n          children: \"serverConstants\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"TEST_HOST_NAME\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"TEST_HOST_NAME\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n  \\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// client side.\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function-variable function\",\n          children: _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Page\"\n          })\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token parameter\",\n          children: \"props\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \" serverConstants \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" props\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"p\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"TEST_HOST_NAME\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"serverConstants\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"TEST_HOST_NAME\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"p\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"本地环境变量\",\n      children: \"本地环境变量\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"关于在本地开发中使用环境变量，next.js 已经有了很好的支持，查看 \", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/basic-features/environment-variables#loading-environment-variables\",\n        children: \"这里\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在实际场景下，可以创建一个.env.local.examlpe文件。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"开发者可以拷贝该文件并将其作为自己的.env.local文件。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \".env.local 不应该被提交到repo中！\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"环境变量-in-jest\",\n      children: \"环境变量 in Jest\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"方法是有很多的，按需采用，这里记录两种。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"在jest的setup文件中设置环境变量\",\n      children: \"在jest的setup文件中设置环境变量\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://jestjs.io/docs/configuration#setupfilesafterenv-array\",\n        children: \"文档在此\"\n      }), \"。简单来说，在这里设置的环境变量会作用于每个测试用例文件。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"适合用于设置默认环境变量，但无法满足需要测试不同的环境变量的场景。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"在测试用例文件中设置环境变量\",\n      children: \"在测试用例文件中设置环境变量\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"当然我们可以在测试用例文件中设置环境变量。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"只是要记住，在每个测试用例前，一定要使用 \", _jsx(_components.a, {\n        href: \"https://jestjs.io/docs/jest-object#jestresetmodules\",\n        children: _jsx(_components.strong, {\n          children: \"restModules\"\n        })\n      }), \" ，且\", _jsx(_components.strong, {\n        children: \"动态引入\"\n      }), \"涉及环境变量的模块。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsx(_components.span, {\n          className: \"token function\",\n          children: \"describe\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'environmental variables'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"OLD_ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"beforeEach\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    jest\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"resetModules\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// Most important - it clears the cache\"\n        }), \"\\n    process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"OLD_ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// Make a copy\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"afterAll\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"OLD_ENV\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// Restore old environment\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"test\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'will receive process.env variables'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// Set the variables\"\n        }), \"\\n    process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"NODE_ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'dev'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"PROXY_PREFIX\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'/new-prefix/'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"API_URL\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'https://new-api.com/'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"APP_PORT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'7080'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"env\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"USE_PROXY\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'false'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" testedModule \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"require\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'../../config/env'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// dynamic import\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// ... actual testing\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"其他\",\n      children: \"其他\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"本地一切安好线上发布缺少依赖可能是\",\n      children: \"本地一切安好，线上发布缺少依赖，可能是？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"规则：如果\", _jsx(_components.code, {\n        children: \"NODE_ENV\"\n      }), \"被设置成\", _jsx(_components.code, {\n        children: \"production\"\n      }), \"，yarn不会安装\", _jsx(_components.code, {\n        children: \"devDependencies\"\n      }), \"中的依赖，具体可看\", _jsx(_components.a, {\n        href: \"https://classic.yarnpkg.com/en/docs/cli/install#toc-yarn-install-production-true-false\",\n        children: \"这里\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所以这种cmd是合理的：\", _jsx(_components.code, {\n        children: \"yarn install && yarn test && NODE_ENV=production yarn export\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"相对的，如果\", _jsx(_components.code, {\n        children: \"NODE_ENV\"\n      }), \"被设置的太早，很可能会导致\", _jsx(_components.code, {\n        children: \"yarn test\"\n      }), \"缺少依赖。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"如何更新包组件服务\",\n      children: \"如何更新包/组件/服务\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"除了更新逻辑，一般还有哪些步骤？\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"更新测试用例，保证本地测试用例通过。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"本地成功运行服务。\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"开一个draft PR.\", \"\\n\", _jsxs(_components.ol, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"将其部署到测试环境。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"在测试环境成功运行。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"更新版本。（视具体情形）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"找人review。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"有了approvals，可以merge。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"其余的就是QA、部署流程等。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"jwt\",\n      children: \"JWT\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JWT（JSON web token）是一种常见的在客户端与服务端间传递信息的方式。\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"除非知道签名，用户是无法伪造数据的。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"而header和payload本身是并没有被加密的。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以在实际应用场景中，任何人都可以查看请求的数据，但不知道签名的普通用户没办法自己构造、篡改请求。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/JSON_Web_Token\",\n        children: \"进一步了解JWT\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"yarn2\",\n      children: \"Yarn2\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Yarn2 = \", _jsx(_components.strong, {\n        children: \"yarn berry\"\n      }), \"（更加准确）。和 yarn 1.x 比起来算是大改。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果使用PnP特性，yarn会生成\", _jsx(_components.code, {\n        children: \".pnp.cjs\"\n      }), \"以代替\", _jsx(_components.code, {\n        children: \"node_modules\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \".pnp.cjs\"\n      }), \"只是一些maps，包括如何在文件系统中找到packages。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"而packages本身，是被zipped压缩过的，所以文件的数量远远少于\", _jsx(_components.code, {\n        children: \"node_modules\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"尽管package被压缩过，我们仍然可以借助\", _jsx(_components.code, {\n        children: \"fs\"\n      }), \"的能力读取文件。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"更多yarn2，欢迎阅读：\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://blog.logrocket.com/javascript-package-managers-compared/\",\n          children: \"JavaScript package managers compared: npm, Yarn, or pnpm?\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.yarnpkg.cn/features/pnp\",\n          children: \"Plug'n'Play\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"线上监控服务异常排查\",\n      children: \"线上监控服务异常排查\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果怀疑有异常的线上流量，如何排查：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"调整时间区间，来观察流量是否是一瞬间涌入的。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"比较服务端和客户端的流量，观察流量是否是直接打到服务端的。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"比较流量峰值日志是否有共同点：Client IP, Country, Region, City…\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"description":"最近结束的一个项目有很多值得学习的地方，挑一些不敏感的在此记录。其中的每一点其实都有深入挖掘的空间，日后想必会再次遇到。......","usedCustomComponentNames":[]},"__N_SSG":true}
{"pageProps":{"id":"js-animation-transform","title":"当我们讨论动画时，我们在讨论什么——transform篇","date":"2017-04-30","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"基本完成了IFE的\", _jsx(_components.a, {\n        href: \"http://ife.baidu.com/course/detail/id/52\",\n        children: \"动画库任务(一)\"\n      }), \",内心是崩溃的。JS补间动画的原理的确很简单，但在实现过程中，才意识到以前用的成熟的动画库，做了多少的工作。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"js动画实现原理\",\n      children: \"JS动画实现原理\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"对于多数成熟的动画库，你只需要提供动画的末状态 end 与动画时长 duration，它就能帮你绘制一段缓动动画，其原理很是单纯，大体可以拆成以下几步：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"根据你提供的末状态 end，获得元素对应的初状态 begin\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"通过初末状态，获得状态的变化量 change\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"定义一个变量来保存动画进行到的时间，如lastTime；一个变量startTime获得动画开始时的时间（new Date()）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"获得当前时间currTime（new Date()），的lastTime = currTime - startTime，将 begin，change，lastTime和duration传入缓动函数，计算出当前时间的状态，并进行设置\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如果lastTime大于duration表明这段动画执行完毕，直接将位置定位到end；否则回到步骤4\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但就是这简单的5步，在实现的过程中有无数的坑啊......。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"PS: 缓动函数的用法，无耻的贴上\", _jsx(_components.a, {\n          href: \"http://www.zhangxinxu.com/wordpress/2016/12/how-use-tween-js-animation-easing/\",\n          children: \"如何使用Tween.js各类原生动画运动缓动算法\"\n        }), \"，这次的重点不是这个。\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"如何从传入的属性值获得必要的数据\",\n      children: \"如何从传入的属性值获得必要的数据\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"为了便于使用，传入的属性值是简单的CSS属性，如：\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token literal-property property\",\n          children: \"width\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"12px\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token literal-property property\",\n          children: \"height\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"12px\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"为了将其作为末状态，我们需要提取出\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"需要改变的属性名\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"对应属性值的数值，因为要计算中间值\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"对应属性值的单位\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我们可以用正则表达式来匹配\", _jsx(_components.code, {\n        children: \"12px\"\n      }), \"中的\", _jsx(_components.code, {\n        children: \"px\"\n      }), \"，将匹配结果保存即可得到单位，再将匹配到的\", _jsx(_components.code, {\n        children: \"px\"\n      }), \"换成\", _jsx(_components.code, {\n        children: \"''\"\n      }), \"，即可得到数值的字符串形式。这里要对\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"系列的属性值做特别处理，由于\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"的属性值是\", _jsx(_components.code, {\n        children: \"rotate(30deg)\"\n      }), \"这种形式，所以无法直接处理，于是参考其他动画库，对于\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"的属性值特别传入，如：\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token literal-property property\",\n          children: \"width\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"12px\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token literal-property property\",\n          children: \"height\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"12px\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token literal-property property\",\n          children: \"rotateZ\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"30deg\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token literal-property property\",\n          children: \"translateX\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"20px\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"然后对其的单位提取步骤便可以统一。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"如何获得初始状态\",\n      children: \"如何获得初始状态\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"初始状态的获得主要依靠\", _jsx(_components.code, {\n        children: \"getComputedStyle(el, null).getPropertyValue(propertyName)\"\n      }), \"方法，由于要传入属性名，所以肯定要依据添加的动画末状态来找到对应的属性名。这里依然是要特别处理\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"系列的属性值，可以用一个正则来匹配末状态传入的属性名，如果是\", _jsx(_components.code, {\n        children: \"rotateZ\"\n      }), \"这样的，就将\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"作为参数传入上面的方法，来获得初始状态的属性...................？结果是返回了\", _jsx(_components.code, {\n        children: \"matrix(a,b,c,d,e,f)\"\n      }), \"这样的属性值，这其中缘由可见\", _jsx(_components.a, {\n        href: \"http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/\",\n        children: \"理解CSS3 transform中的Matrix(矩阵)\"\n      }), \",总之我们可以方便的从\", _jsx(_components.code, {\n        children: \"rotate\"\n      }), \"值计算出\", _jsx(_components.code, {\n        children: \"matrix\"\n      }), \"值，但是想要反过来（主要是获得rotate值，涉及到三角函数）却很不精确，暂时不考虑这种方法。事实上我们希望能像获取元素的\", _jsx(_components.code, {\n        children: \"style\"\n      }), \"属性一样，直接得到\", _jsx(_components.code, {\n        children: \"rotate\"\n      }), \"属性值，但对于设置在CSS样式表里的属性，的确无法直接得到。so目前的一个很坑的地方——对于一个在样式表里设置了\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"属性的元素，在第一次进行动画时，无法获得其初状态......这个问题在当前的velocityJs中也仍然存在，会直接从0的值开始动画，这里的解决方法暂时还没有寻得。但至少，之后的动画我们还是有办法掌控的。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"如何在计算完成后设置元素的状态\",\n      children: \"如何在计算完成后，设置元素的状态\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"非\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"系的没什么好讲的，直接\", _jsx(_components.code, {\n        children: \"style = 数值 + 单位\"\n      }), \"即可。但是由于transform的属性值很有可能不止一个，如果直接给style赋新值，将会覆盖所有transform属性。解决方法：定义一个transformCache对象，如果有transform属性需要设置，就在transformCache查找是否存在该属性：不存在便定义该属性与对应属性值，如果存在就更新属性值；然后遍历所有的属性，拼接出完整的\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"属性。\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"由于\", _jsx(_components.code, {\n        children: \"transform\"\n      }), \"有关的很多地方都要特殊处理，所以设计模式的运用得当在该情形下尤为重要，我自己写的似乎就有些混乱了......而且初始状态的transform获取还没有解决，待更新......\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"description":"对于多数成熟的动画库，你只需要提供动画的末状态 end 与动画时长 duration，它就能帮你绘制一段缓动动画，其原理很是单纯，大体可以拆成以下几步：......","usedCustomComponentNames":[]},"__N_SSG":true}
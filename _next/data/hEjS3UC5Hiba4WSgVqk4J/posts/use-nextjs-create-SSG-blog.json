{"pageProps":{"id":"use-nextjs-create-SSG-blog","title":"你的静态博客，何必是hexo","date":"2023-01-18","htmlText":"<html><head></head><body><p>hexo一直是静态博客的首选之一，它开箱即用的特点以及相对丰富的主题选择让使用者可以聚焦于博客内容的编写，同时拥有一个相对美观的界面。但如果你是一个对博客内容有高度自定义需求的开发者，且并没有分享博客主题的诉求，hexo的主题开发会是一定的挑战，因为你需要在其基础上进行主题模版开发，而不能自由选择心仪的技术栈。</p>\n<p>本文将从静态博客的核心原理出发，以我个人的博客为例，阐述如何选择合适的技术栈，来搭建一个最基础的静态博客应用。</p>\n<p>本文参考仓库：<a href=\"https://github.com/B-sirius/b-sirius.github.io/tree/0.1.0\" target=\"_blank\" rel=\"nofollow\">b-sirius.github.io</a></p>\n<hr>\n<p>目录：</p>\n<ul>\n<li><a href=\"#%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5\">静态博客从哪里来</a></li>\n<li><a href=\"#%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD\">博客功能</a>\n<ul>\n<li><a href=\"#%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8\">文章列表</a></li>\n<li><a href=\"#%E9%A2%84%E6%B8%B2%E6%9F%93%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\">预渲染的动态路由</a></li>\n<li><a href=\"#%E6%96%87%E7%AB%A0%E8%AF%A6%E6%83%85\">文章详情</a></li>\n<li><a href=\"#rss%E6%94%AF%E6%8C%81\">RSS支持</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8D%9A%E5%AE%A2%E4%BD%93%E9%AA%8C\">博客体验</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">参考链接</a></li>\n</ul>\n<h2 id=\"静态博客从哪里来\">静态博客从哪里来</h2>\n<p>首先，静态博客是什么？</p>\n<p>博客，一般至少涉及两个页面（模块）：文章列表页、文章详情页。</p>\n<p>静态，意味着不依赖服务端，意味着用户访问的内容，就是一堆已经板上钉钉写死的html、css、js代码。</p>\n<p>这堆代码从哪里来？互联网的蛮荒时代，可能是人们一个个手写的，但现在显然不是，它们必然是编译产物。</p>\n<p>为了能够设计我们自己的博客，我们不妨从hexo入手，先看看hexo的编译产物是什么——</p>\n<p><img src=\"https://s2.loli.net/2023/01/04/LxVfBwpvloub93X.png\" alt=\"hexo的编译产物\"></p>\n<p>上图是典型的hexo的编译产物，我们关注一下html的入口文件：</p>\n<ul>\n<li>蓝框部分，是博客的“归档”功能，不属于上面提到的博客基本页面，就先无视。</li>\n<li>红框部分，首先是一个<code>index.html</code>，这是博客列表页；其次是<code>${date}/${title}/index.html</code>，这是两个博客详情页，对应着两篇博文。</li>\n</ul>\n<p>而在hexo项目中，你需要自定义的内容很简单，自然就是博客内容markdown文件，都存放在<code>source/_posts</code>目录中。</p>\n<p><img src=\"https://s2.loli.net/2023/01/04/rDgzhAdBL2Tf4y1.png\" alt=\"hexo的博客存放目录\"></p>\n<p>因此，hexo的基本思路就是，将文件夹内的一系列markdown文件，构建成用户最终访问的文章列表页与文章详情页。最后部署的就是这份构建产物。</p>\n<p>以下为一个典型的使用hexo搭建静态博客的流程：</p>\n<p><img src=\"https://s2.loli.net/2023/01/13/4jVvm1eoY7sOMLK.png\" alt=\"hexo流程\"></p>\n<p>那么hexo是不可替代的么？</p>\n<p>当然不是，从上图中可以看出，hexo是一个SSG框架，如果你不熟悉SSG，可以先去了解一下<a href=\"https://juejin.cn/post/7039151040188383268\" target=\"_blank\" rel=\"nofollow\">CSR，SSR和SSG是什么</a>。</p>\n<p>因此，只要是支持SSG的框架都可以用于静态博客的开发。我个人选择了React系的<a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow\">Next.js</a>，其他框架如<a href=\"https://vue-ssg.jamstacks.net/\" target=\"_blank\" rel=\"nofollow\">vue-ssg</a>也都是可以使用的。</p>\n<h2 id=\"博客功能\">博客功能</h2>\n<p>现在我们知道了静态博客大体是如何工作的，也确定了使用的框架。</p>\n<p>项目初始化完毕，面对着hello-world的一张白纸，该考虑如何实现博客的具体功能了。</p>\n<h3 id=\"文章列表\">文章列表</h3>\n<p><img src=\"https://s2.loli.net/2023/01/17/bMrK3mC8cDXo512.png\" alt=\"\"></p>\n<p>Feature list:</p>\n<ol>\n<li>列表由一个个文章描述的卡片堆叠而成。</li>\n<li>每个卡片的内容有：标题、文章发布时间、文章描述。</li>\n<li>列表为按时间倒序排序。</li>\n<li>点击卡片后，可以跳转到文章的详情页。</li>\n</ol>\n<p>而我们的原材料只有文件夹内的一堆md文件，显然我们会遍历这个文件夹，并读取各个文件，以获得信息。</p>\n<p>且由于SSG的特性，这个步骤会在开发者本地或服务端（即非浏览器端、客户端）完成，因此需要用到node。</p>\n<p><strong>读取文件信息</strong></p>\n<p>读取文件，自然要用到node的<code>fs</code>，由于<code>fs</code>不支持Promise，额外引入<a href=\"https://www.npmjs.com/package/fs-extra\" target=\"_blank\" rel=\"nofollow\">fs-extra</a>也是不错的。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs-extra'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> postFileNames <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> fse<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./_posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// postFileNames会是一个文件名列表</span>\n</code></pre>\n<p>有了文件名列表，就可以组装出每个文件的访问路径（使用<a href=\"https://www.geeksforgeeks.org/node-js-process-cwd-method/\" target=\"_blank\" rel=\"nofollow\">process.cwd</a>获取当前路径）。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mdPathList <span class=\"token operator\">=</span> postFileNames<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_posts'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>于是我们就可以遍历访问到每个文件的具体信息。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> matter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gray-matter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> path <span class=\"token punctuation\">}</span> <span class=\"token keyword\">of</span> mdPathList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> mdData <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> fse<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> mdInfo<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">matter</span><span class=\"token punctuation\">(</span>mdData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> skip <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> mdInfo<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这里涉及到一个非常实用的工具<code>gray-matter</code>，它可以读取出文件的front-matter，即yaml格式的一段文本。</p>\n<p><img src=\"https://s2.loli.net/2023/01/17/JNlPTeR6dIfhkqF.png\" alt=\"front-matter\"></p>\n<p>于是我们获得了每篇博客的标题与日期。</p>\n<p><strong>获取博客的概要描述</strong></p>\n<p>当然，概要描述也是可以写在front-matter中，尤其是概要与正文内容相互独立的时候。</p>\n<p>但如果是像我这样的懒人，只想用正文中的一段话当概要，自然这个时候要从正文内容中去读取并截取文本了。</p>\n<p>由于我们读取到的文件是markdown的原始内容，会有<code>## ---</code>这样的标记符号，且我们也不希望描述是一个二级标题，而是正文文本，所以就需要用到一些正则匹配，来获取到一段纯文本描述。</p>\n<p>以下方法来自于<a href=\"https://stackoverflow.com/a/69656654\" target=\"_blank\" rel=\"nofollow\">stackoverflow</a>，可以用于参考。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">md</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 标题、列表、表格这些都是我们不想用于描述的，需要通过正则过滤掉</span>\n    <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^#\\s+.+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">heading</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^#+\\s+.+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">custom</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\$\\$\\s*\\w+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">ol</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+\\.\\s+.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">ul</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\*\\s+.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">task</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\*\\s+\\[.]\\s+.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">blockQuote</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">>.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">table</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\|.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">image</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">!\\[.+\\]\\(.+\\).*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\[.+\\]\\(.+\\).*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">codeBlock</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">`{3}\\w+.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTitle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isHeading</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">heading</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isCustom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">custom</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isOl</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">ol</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isUl</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">ul</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">task</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isBlockQuote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">blockQuote</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isImage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">image</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isUrl</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isCodeBlock</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> regex<span class=\"token punctuation\">.</span><span class=\"token property-access\">codeBlock</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>md<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> tokens <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去除了空行</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> tokens<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token function\">isTitle</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isHeading</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isCustom</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isOl</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isUl</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isTask</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isBlockQuote</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isImage</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isUrl</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token function\">isCodeBlock</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n\n      \t<span class=\"token comment\">// 返回第一个非上述匹配的内容</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">......</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>生成博客id</strong></p>\n<p>对于每一篇博客，我们最终都需要一个唯一的id，一种方法是直接用标题作id（博客标题显然不应该重复）。不过我们一般需要做一些encode（<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"nofollow\">encodeURIComponent</a>），否则中文在url中很容易出问题。</p>\n<p>只不过这种方式生成的URI一般会超级超级长，所以我个人用一些简单的方法生成了数字id，并最终存储为在一个json文件中。</p>\n<p>最后我生成了一个json文件，用于存储这些描述信息。</p>\n<p><img src=\"https://s2.loli.net/2023/01/17/7t9CfVzwLnW4y5l.png\" alt=\"\"></p>\n<h3 id=\"预渲染的动态路由\">预渲染的动态路由</h3>\n<p>既然我们事先就知道博客有哪些，且有了一份json文件映射好了id与文件的关系，因此动态路由自然是可以预渲染的。</p>\n<p>下面是next.js中预渲染的方法：<a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-static-props\" target=\"_blank\" rel=\"nofollow\">getStaticProps</a>。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// postMap是上文中生成的json文件</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// path即预渲染的路由</span>\n        <span class=\"token literal-property property\">paths</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>postMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">fallback</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 此处的id就是上面的id</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> date <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> postMap<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> mdData <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> fse<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postsDirPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> mdText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">matter</span><span class=\"token punctuation\">(</span>mdData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            id<span class=\"token punctuation\">,</span>\n            title<span class=\"token punctuation\">,</span>\n            date<span class=\"token punctuation\">,</span>\n            mdText<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"文章详情\">文章详情</h3>\n<p>文章详情中的关键点是，如何将markdown渲染为用户友好的Html，你可能会需要做以下几件事：</p>\n<p><strong>Markdown to Html</strong></p>\n<p>这里可以用<a href=\"https://github.com/remarkjs/react-markdown\" target=\"_blank\" rel=\"nofollow\">React-Markdown</a>来实现，显然它React友好。具体的用法就不赘述了。</p>\n<p>不过需要注意的是，React-Markdown需要在客户端运行，因此我们不能直接将其写在render中，而是要异步渲染（可以使用useEffect）。</p>\n<p><strong>高亮code</strong></p>\n<p>同样我们有一个可以配套使用的package：<a href=\"https://github.com/react-syntax-highlighter/react-syntax-highlighter\" target=\"_blank\" rel=\"nofollow\">react-syntax-highlighter</a>。</p>\n<p>配合ReactMarkdown的<code>components</code>属性，可以对code进行定制。</p>\n<p><strong>支持锚点</strong></p>\n<p>如果我们想要使用目录导航，标题的锚点就非常重要了。</p>\n<p>同样在ReactMarkdown的<code>components</code>属性，可以对<code>h2</code>，<code>h3</code>等进行定制，在这里添加生成锚点的逻辑。</p>\n<p><strong>支持html in markdown</strong></p>\n<p>如果你要在markdown中插入codepen、sandbox之类的代码示例，一般都需要采用html in markdown的方式，默认情况下ReactMarkdown会将所有html标签都无害化处理，想要让这些html生效，可以使用<a href=\"https://github.com/rehypejs/rehype-raw\" target=\"_blank\" rel=\"nofollow\">rehype-raw</a>。</p>\n<p><strong>完整代码</strong></p>\n<p>请见<a href=\"https://github.com/B-sirius/b-sirius.github.io/blob/0.1.0/pages/posts/%5Bid%5D.js\" target=\"_blank\" rel=\"nofollow\">github</a>。</p>\n<h3 id=\"rss支持\">RSS支持</h3>\n<p>RSS的本质其实很简单，它是一份按照规则定制的静态xml文件，内容是需要阅读的内容的基础信息。我们之前已经处理过文章列表，其中包含的信息恰恰就是博客的RSS应该包含的：标题、日期、简介、跳转地址。而RSS订阅源会通过这个xml的文件地址来进行拉取。</p>\n<p>当然，有<a href=\"https://www.npmjs.com/package/rss\" target=\"_blank\" rel=\"nofollow\">RSS</a>这个包可以帮助我们生成这个xml文件，并不复杂，可以直接参考<a href=\"https://github.com/B-sirius/b-sirius.github.io/blob/0.1.0/server/generateRSSFeed.js\" target=\"_blank\" rel=\"nofollow\">代码</a>。</p>\n<h2 id=\"博客体验\">博客体验</h2>\n<p>在上面提到的<a href=\"https://juejin.cn/post/7039151040188383268\" target=\"_blank\" rel=\"nofollow\">CSR，SSR和SSG是什么</a>，其中提到了SSG的性能是很好的。但真正影响博客体验的要素是很多的，我觉得可以从以下几方面来考虑：</p>\n<ol>\n<li>理论性能、体验，可以用Chrome的Lighthouse来测试，适合作为参考。</li>\n<li>bundle是否合理，可以使用<code>@next/bundle-analyzer</code>之类的库来帮助分析。</li>\n<li>设备适配性：大致从移动端、平板、电脑这几种设备类型来考虑。\n<ol>\n<li>视觉是否合理；</li>\n<li>交互是否合理；</li>\n<li>请求资源是否合理（如请求的图片尺寸）；</li>\n</ol>\n</li>\n<li>网络环境，可以用<a href=\"https://tool.chinaz.com/sitespeed\" target=\"_blank\" rel=\"nofollow\">站长工具的网站测速工具</a>，检查对大陆用户是否友好。</li>\n<li>社交平台分享友好，是否有favicon.ico，是否有相应的metadata配置。</li>\n<li>SEO优化，同样可以用站长工具帮助检查。</li>\n</ol>\n<hr>\n<p>以上基本就是我在搭建自己的静态博客时，所考虑到的东西。许多提到的可优化项或许还没有实施，但还是欢迎来访问我的博客<a href=\"https://b-sirius.github.io/posts\" target=\"_blank\" rel=\"nofollow\">LWDW!</a>，同时也可以查看<a href=\"https://github.com/B-sirius/b-sirius.github.io/tree/0.1.0\" target=\"_blank\" rel=\"nofollow\">我的github仓库</a>，作为实现的参考。</p>\n<h2 id=\"参考链接\">参考链接</h2>\n<ol>\n<li><a href=\"https://juejin.cn/post/7039151040188383268\" target=\"_blank\" rel=\"nofollow\">CSR，SSR和SSG是什么</a></li>\n<li><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow\">Next.js</a></li>\n<li><a href=\"https://vue-ssg.jamstacks.net/\" target=\"_blank\" rel=\"nofollow\">vue-ssg</a></li>\n<li><a href=\"https://www.npmjs.com/package/fs-extra\" target=\"_blank\" rel=\"nofollow\">fs-extra</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/node-js-process-cwd-method/\" target=\"_blank\" rel=\"nofollow\">process.cwd</a></li>\n<li><a href=\"https://stackoverflow.com/a/69656654\" target=\"_blank\" rel=\"nofollow\">Extract first p and h1 tag content from markdown</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"nofollow\">encodeURIComponent</a></li>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-static-props\" target=\"_blank\" rel=\"nofollow\">getStaticProps</a></li>\n<li><a href=\"https://github.com/remarkjs/react-markdown\" target=\"_blank\" rel=\"nofollow\">React-Markdown</a></li>\n<li><a href=\"https://github.com/react-syntax-highlighter/react-syntax-highlighter\" target=\"_blank\" rel=\"nofollow\">react-syntax-highlighter</a></li>\n<li><a href=\"https://github.com/rehypejs/rehype-raw\" target=\"_blank\" rel=\"nofollow\">rehype-raw</a></li>\n<li><a href=\"https://b-sirius.github.io/posts\" target=\"_blank\" rel=\"nofollow\">LWDW!</a></li>\n<li><a href=\"https://github.com/B-sirius/b-sirius.github.io/tree/0.1.0\" target=\"_blank\" rel=\"nofollow\">b-sirius.github.io</a></li>\n</ol>\n</body></html>","description":"hexo一直是静态博客的首选之一，它开箱即用的特点以及相对丰富的主题选择让使用者可以聚焦于博客内容的编写，同时拥有一个相对美观的界面。但如果你是一个对博客内容有高度自定义需求的开发者，且并没有分享博客......"},"__N_SSG":true}
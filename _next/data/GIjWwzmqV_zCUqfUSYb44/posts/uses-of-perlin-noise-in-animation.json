{"pageProps":{"id":"uses-of-perlin-noise-in-animation","title":"柏林噪声（perlin noise）都是怪物么！","date":"2018-03-30","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    strong: \"strong\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"前言\",\n      children: \"前言\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不知道各位有没有见过这样歪歪扭扭的动画效果，非常有趣不是么：\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://s2.loli.net/2023/07/18/o7Rkjh8WTxSICeq.png\",\n        alt: \"image.png\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所以要如何实现这样的效果呢——“随机！”，是的，我反正是这么想的，于是一个Math.random()怼上去，结果是线条像抽风一样扭成一团.....自然，线条是由控制点连接起来的，对其叠加一个随机数，前后联系的线条自然会显得支离破碎，或者说：“不自然”。就如同现实中的海浪、云朵、山脉地形一样，他们看起来都是\", _jsx(_components.strong, {\n        children: \"随机\"\n      }), \"的，却又有一种\", _jsx(_components.strong, {\n        children: \"连续性\"\n      }), \"！但是，为了应用到计算机图像中，我们要如何抽象这样的现象呢！\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"柏林噪声perlin-noise与分形噪声\",\n      children: \"柏林噪声（perlin noise）与分形噪声！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果你想看的话，这里是\", _jsx(_components.a, {\n        href: \"https://zh.wikipedia.org/wiki/Perlin%E5%99%AA%E5%A3%B0\",\n        children: \"柏林噪声的定义\"\n      }), \"！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"看得懂吗？看不懂吧，到了俺的画画时间！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/%E4%B8%80%E7%BB%B4%E6%9B%B2%E7%BA%BF.png\",\n        alt: \"一维曲线\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上面有三张图，姑且称为图一（左上）图二（左下）图三（右）好了（画的时候怎么不标好啊！）。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"图一是这样画出来的：\", _jsx(_components.strong, {\n        children: \"在一维坐标轴上，选择等距的无穷个点（这里就假设为整数啦），将空间划分为等长的线段，为每个点随机指定一个值（这个值的范围就是振幅amplitude）和一个梯度（在一维上，梯度就是斜率没错！）\"\n      }), \"。然后“对于坐标值为整数的点，将该点对应的值作为噪声图像上该点的值；对于坐标值不为整数的点，将相邻两点的值和\", _jsxs(_components.strong, {\n        children: [\"根据梯度进行\", _jsx(_components.a, {\n          href: \"https://zh.wikipedia.org/wiki/%E6%8F%92%E5%80%BC\",\n          children: \"插值\"\n        }), \"运算\"]\n      }), \"，获得该点的值”——这个图像在地球人看来，就是一堆点舒舒服服地给他们平滑连接起来。而这，就是一维柏林噪声图像，全剧终。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"喂等等！标题不是这么写的啊！！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"好吧，图二也一样是柏林噪声的一维图像，只不过取点的间隔更小（也就是频率更高），振幅也更小而已，但是你也看到那张融合卡了吧！没错，通过叠加更高频率的柏林噪声，我们就可以得到图三那样效果更复杂的图像，也更加符合自然界中海岸线，地形，海浪等特征，顺带一提，我们一直形容的很模糊的特征有个术语，叫\", _jsx(_components.a, {\n        href: \"https://zh.wikipedia.org/wiki/%E8%87%AA%E7%9B%B8%E4%BC%BC\",\n        children: \"自相似\"\n      }), \"！\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/6/65/Kochsim.gif\",\n        alt: \"自相似科赫曲线\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"二维\",\n      children: \"二维\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"关于具体算法，仍是在一维的基础上进行衍生：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"为所有坐标为\", _jsx(_components.code, {\n          children: \"(x, y)\"\n        }), \" 且\", _jsx(_components.code, {\n          children: \"x, y\"\n        }), \"都是整数的点指定一个值，同时指定一个\", _jsx(_components.a, {\n          href: \"https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6\",\n          children: \"梯度\"\n        }), \"，这些点将空间分成方格；\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"对于坐标轴为整数的点，即上述方格的顶点，将为它指定的值作为该点的值；对于某个方格内部的点\", _jsx(_components.code, {\n          children: \"(x, y)\"\n        }), \"，用所在方格四个顶点的值和\", _jsx(_components.a, {\n          href: \"https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6\",\n          children: \"梯度\"\n        }), \"进行插值。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但没人看得懂这玩意儿不是么，那直接感受下：\"\n    }), \"\\n\", _jsxs(\"p\", {\n      \"data-height\": \"265\",\n      \"data-theme-id\": \"0\",\n      \"data-slug-hash\": \"LdzLXR\",\n      \"data-default-tab\": \"js,result\",\n      \"data-user\": \"padfoot_07\",\n      \"data-embed-version\": \"2\",\n      \"data-pen-title\": \"perlin noise-two dimensional\",\n      class: \"codepen\",\n      children: [\"See the Pen \", _jsx(\"a\", {\n        href: \"https://codepen.io/padfoot_07/pen/LdzLXR/\",\n        children: \"perlin noise-two dimensional\"\n      }), \" by Zhouyi (\", _jsx(\"a\", {\n        href: \"https://codepen.io/padfoot_07\",\n        children: \"@padfoot_07\"\n      }), \") on \", _jsx(\"a\", {\n        href: \"https://codepen.io\",\n        children: \"CodePen\"\n      }), \".\"]\n    }), \"\\n\", _jsx(\"script\", {\n      async: true,\n      src: \"https://static.codepen.io/assets/embed/ei.js\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"左侧是二维柏林噪声，右侧是纯随机，所以二维图像中的每个点看起来都\", _jsx(_components.strong, {\n        children: \"受其周围点的影响\"\n      }), \"，这有些类似于云不是么233\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"让我见识一下吧noise的性能\",\n      children: \"让我见识一下吧，noise的性能\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"不要被上述图像束缚了思考，经典柏林噪声建议使用\", _jsx(_components.img, {\n        src: \"https://wikimedia.org/api/rest_v1/media/math/render/svg/ed5b799e7d9cd423db6f533050ddfda181b4850b\",\n        alt: \"\"\n      }), \"作为插值函数，但这并不妨碍俺们使用其他函数，如（图像来源：\", _jsx(_components.a, {\n        href: \"https://zhuanlan.zhihu.com/p/22337544\",\n        children: \"不只是噪音\"\n      }), \"）：\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"使用\", _jsx(_components.strong, {\n        children: \"指数\"\n      }), \"插值\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/%E6%8F%92%E5%80%BC1.jpg\",\n        alt: \"指数插值\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"使用\", _jsx(_components.strong, {\n        children: \"三角函数\"\n      }), \"插值\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://hukua-blog.oss-cn-beijing.aliyuncs.com/markdown-imgs/%E6%8F%92%E5%80%BC2.jpg\",\n        alt: \"三角函数插值\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我们还可以对其进行\", _jsx(_components.strong, {\n        children: \"叠加\"\n      }), \"，总之可能性是无限的啊！\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"实际运用\",\n      children: \"实际运用\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以上我们仅仅是对噪声数值本身进行了可视化，事实上对于其特性的使用，完全可以放飞自我啊！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"（以下建议使用pc浏览）\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"比如将其作为速度场影响粒子流动：\"\n    }), \"\\n\", _jsxs(\"p\", {\n      \"data-height\": \"265\",\n      \"data-theme-id\": \"0\",\n      \"data-slug-hash\": \"XEePJb\",\n      \"data-default-tab\": \"js,result\",\n      \"data-user\": \"padfoot_07\",\n      \"data-embed-version\": \"2\",\n      \"data-pen-title\": \"perlin noise-flow\",\n      class: \"codepen\",\n      children: [\"See the Pen \", _jsx(\"a\", {\n        href: \"https://codepen.io/padfoot_07/pen/XEePJb/\",\n        children: \"perlin noise-flow\"\n      }), \" by Zhouyi (\", _jsx(\"a\", {\n        href: \"https://codepen.io/padfoot_07\",\n        children: \"@padfoot_07\"\n      }), \") on \", _jsx(\"a\", {\n        href: \"https://codepen.io\",\n        children: \"CodePen\"\n      }), \".\"]\n    }), \"\\n\", _jsx(\"script\", {\n      async: true,\n      src: \"https://static.codepen.io/assets/embed/ei.js\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"模拟波浪：\"\n    }), \"\\n\", _jsxs(\"p\", {\n      \"data-height\": \"265\",\n      \"data-theme-id\": \"0\",\n      \"data-slug-hash\": \"dXzmYQ\",\n      \"data-default-tab\": \"js,result\",\n      \"data-user\": \"arnaudrocca\",\n      \"data-embed-version\": \"2\",\n      \"data-pen-title\": \"Water shader\",\n      class: \"codepen\",\n      children: [\"See the Pen \", _jsx(\"a\", {\n        href: \"https://codepen.io/arnaudrocca/pen/dXzmYQ/\",\n        children: \"Water shader\"\n      }), \" by Arnaud Rocca (\", _jsx(\"a\", {\n        href: \"https://codepen.io/arnaudrocca\",\n        children: \"@arnaudrocca\"\n      }), \") on \", _jsx(\"a\", {\n        href: \"https://codepen.io\",\n        children: \"CodePen\"\n      }), \".\"]\n    }), \"\\n\", _jsx(\"script\", {\n      async: true,\n      src: \"https://static.codepen.io/assets/embed/ei.js\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"浮夸的滤镜：\"\n    }), \"\\n\", _jsxs(\"p\", {\n      \"data-height\": \"265\",\n      \"data-theme-id\": \"0\",\n      \"data-slug-hash\": \"YePWqG\",\n      \"data-default-tab\": \"js,result\",\n      \"data-user\": \"Thibka\",\n      \"data-embed-version\": \"2\",\n      \"data-pen-title\": \"Fun with perlin\",\n      class: \"codepen\",\n      children: [\"See the Pen \", _jsx(\"a\", {\n        href: \"https://codepen.io/Thibka/pen/YePWqG/\",\n        children: \"Fun with perlin\"\n      }), \" by Thibaut (\", _jsx(\"a\", {\n        href: \"https://codepen.io/Thibka\",\n        children: \"@Thibka\"\n      }), \") on \", _jsx(\"a\", {\n        href: \"https://codepen.io\",\n        children: \"CodePen\"\n      }), \".\"]\n    }), \"\\n\", _jsx(\"script\", {\n      async: true,\n      src: \"https://static.codepen.io/assets/embed/ei.js\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"为了各位的流量考虑就不再多放辣，总之是很有搞头，相信都get到那个点了。\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"当初想要实现这样的效果折腾了几天也没搞定，到底还是没能摸清其本质特征啊orz，好个大坑慢慢填......\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"description":"不知道各位有没有见过这样歪歪扭扭的动画效果，非常有趣不是么：......","usedCustomComponentNames":[]},"__N_SSG":true}
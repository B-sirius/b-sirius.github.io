{"pageProps":{"id":"R-project-summary","title":"R项目小结","date":"2023-01-09","htmlText":"<html><head></head><body><p>最近结束的一个项目有很多值得学习的地方，挑一些不敏感的在此记录。其中的每一点其实都有深入挖掘的空间，日后想必会再次遇到。</p>\n<hr>\n<h2 id=\"文档设计\">文档设计</h2>\n<p>有哪些文档可以整理归总？有的文档适合单独总结，有的适合放在Readme中，但总之，以下是一些可以考虑的点。</p>\n<h3 id=\"系统设计文档\">系统设计文档</h3>\n<p>这里的设计指的是系统的架构，尤其要关注<strong>系统之间是如何连接的</strong>。</p>\n<p>而以下内容不应该被包含在其中：</p>\n<ul>\n<li>服务的具体细节。</li>\n<li>组件的设计模式。</li>\n</ul>\n<h3 id=\"组件文档\">组件文档</h3>\n<p>整理所有的组件/服务，可以有以下关注点：</p>\n<ul>\n<li>介绍</li>\n<li>服务类型（比如SSR /Static）</li>\n<li>路由前缀</li>\n<li>生产环境域名</li>\n<li>预发环境域名</li>\n<li>测试环境域名（规则）</li>\n<li>仓库地址</li>\n<li>流水线地址</li>\n<li>发布分支</li>\n<li>涉及技术栈</li>\n</ul>\n<h3 id=\"开发者faq\">开发者FAQ</h3>\n<p>目的是收集开发者关心的常见问题，比如项目如何本地启动，必要权限如何申请等。</p>\n<h3 id=\"开发者验证指南\">开发者验证指南</h3>\n<p>目的是保证开发者提交的组件可以在生产环境中运行，而不是完全依赖QA。常见的手段有测试用例，code review等，且很可能与CI/CD流程有关。个人觉得开发者很容易对一些小改动有迷之自信，结果却提交无法在测试环境运行的代码甚至搞崩线上。该步骤非常重要又容易被忽视。</p>\n<h2 id=\"aws服务\">AWS服务</h2>\n<p>aws服务太常见了，稍微记录一下我本次接触的，不至于一些名词都没有概念。</p>\n<h3 id=\"ecs\">ECS</h3>\n<p>ECS is Amazon Elastic <strong>Container Service</strong>.</p>\n<ul>\n<li>Container Orchestration Service (容器编排工具）</li>\n<li>Manages the whole container lifecycle.\n<ul>\n<li>start</li>\n<li>re-schedule</li>\n<li>load balance</li>\n</ul>\n</li>\n<li>ECS Cluster（ECS集群）是Control Plane，管理所有运行着容器的虚拟机器。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/01/09/u8ytTRfvmx7gk4n.jpg\" alt=\"How does ECS work\"></p>\n<ul>\n<li>而这些虚拟机是什么？是EC2 Instance，你还是需要管理这些Instance的，比如在增加container的时候，需要确保Instance的资源足够。</li>\n<li>但如果我们想在AWS上hosting infrastructure。可以用AWS Fargate。那就不需要手动管理Instance，他会根据你想要运行的container来自动分配资源。节省呀！</li>\n</ul>\n<h3 id=\"eks\">EKS</h3>\n<p>EKS is Elastic <strong>Kubernetes</strong> Service.</p>\n<p>Kubernetes 是ECS的竞品，非常Popular，所以EKS就是为了在AWS使用Kubernetes推出的。</p>\n<p>EKS的工作方式和ECS差不多。</p>\n<h3 id=\"ecr\">ECR</h3>\n<p>ECR is Elastic <strong>Container Registry</strong>, a private docker registry.</p>\n<p><img src=\"https://s2.loli.net/2023/01/09/Lw6m7geKZ9A4YSW.png\" alt=\"whole story, Jenkins involved here!\"></p>\n<h3 id=\"elb\">ELB</h3>\n<p>ELB is Elastic load balancing service.</p>\n<p><img src=\"https://s2.loli.net/2023/01/09/EaFjZvJ731LDGRA.png\" alt=\"负载均衡服务\"></p>\n<p>使用这样一个 load balancer有很多好处</p>\n<ul>\n<li>将流量分配给了很多下级实例</li>\n<li>只暴露出一个入口（DNS）</li>\n<li>无缝处理下级应用的failures</li>\n<li>对实例进行健康检查</li>\n<li>提供https</li>\n<li>强制使用cookies，所以用户可以访问到同一个instance</li>\n<li>…</li>\n</ul>\n<h3 id=\"aws-lambda\">AWS lambda</h3>\n<p>这是一个Serverless服务，基本上可以理解为它提供了根据事件自动触发Function的能力。</p>\n<p>其中事件可以指的是S3的内容变化，API的请求，或其他各种各样的AWS服务事件。</p>\n<p>这里涉及到一个概念，Serverless，值得说一说。</p>\n<p>我个人的理解是这样的：</p>\n<p>首先Serverless并不是说没有Server，而是Server对用户不可见，which means：</p>\n<ul>\n<li>不需要手动管理server。</li>\n<li>会根据使用自动扩容。</li>\n<li>只有当被使用的时候，才会产生费用（而不是为Server本身付费）。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/01/09/B2oTW3lrEuznZGK.png\" alt=\"\"></p>\n<h2 id=\"环境变量\">环境变量</h2>\n<h3 id=\"环境变量-in-nextjs\">环境变量 in Next.js</h3>\n<p>Before <code>const HOST_NAME = 'www.sample.com'</code>.</p>\n<p>After <code>const HOST_NAME = 'process.env.NEXT_PUBLIC_HOST_NAME'</code>.</p>\n<p>这里涉及到Next.js的一个特性：<a href=\"https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser\" target=\"_blank\" rel=\"nofollow\">expose env vars to the browser</a>。</p>\n<ul>\n<li>During the <strong>build stage</strong>, next.js will find these env vars start with <strong>NEXT_PUBLIC_</strong> and replace them with literal.</li>\n<li>build stage很关键，在CI/CD流程中，可能有build、release等多个环节，在哪里传入环境变量很关键。</li>\n</ul>\n<p><strong>Trick: 如果在一些情形下，我们需要把用于node端的环境变量暴露给浏览器，可以怎么做？</strong></p>\n<ul>\n<li>Read these env vars inside <code>getServerSideProps</code> and return them as props. <a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props#when-does-getserversideprops-run\" target=\"_blank\" rel=\"nofollow\">More to read about it</a>.</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getServerSideProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we can read server side env vars here.</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">serverConstants</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">TEST_HOST_NAME</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TEST_HOST_NAME</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// client side.</span>\n  <span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Page</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> serverConstants <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&#x3C;</span>p<span class=\"token operator\">></span><span class=\"token constant\">TEST_HOST_NAME</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>serverConstants<span class=\"token punctuation\">.</span><span class=\"token constant\">TEST_HOST_NAME</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"本地环境变量\">本地环境变量</h3>\n<p>关于在本地开发中使用环境变量，next.js 已经有了很好的支持，查看 <a href=\"https://nextjs.org/docs/basic-features/environment-variables#loading-environment-variables\" target=\"_blank\" rel=\"nofollow\">这里</a>。</p>\n<p>在实际场景下，可以创建一个.env.local.examlpe文件。</p>\n<p>开发者可以拷贝该文件并将其作为自己的.env.local文件。</p>\n<p><strong>.env.local 不应该被提交到repo中！</strong></p>\n<h3 id=\"环境变量-in-jest\">环境变量 in Jest</h3>\n<p>方法是有很多的，按需采用，这里记录两种。</p>\n<h3 id=\"在jest的setup文件中设置环境变量\">在jest的setup文件中设置环境变量</h3>\n<p><a href=\"https://jestjs.io/docs/configuration#setupfilesafterenv-array\" target=\"_blank\" rel=\"nofollow\">文档在此</a>。简单来说，在这里设置的环境变量会作用于每个测试用例文件。</p>\n<p>适合用于设置默认环境变量，但无法满足需要测试不同的环境变量的场景。</p>\n<h3 id=\"在测试用例文件中设置环境变量\">在测试用例文件中设置环境变量</h3>\n<p>当然我们可以在测试用例文件中设置环境变量。</p>\n<p>只是要记住，在每个测试用例前，一定要使用 <a href=\"https://jestjs.io/docs/jest-object#jestresetmodules\" target=\"_blank\" rel=\"nofollow\"><strong>restModules</strong></a> ，且<strong>动态引入</strong>涉及环境变量的模块。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'environmental variables'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">OLD_ENV</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resetModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Most important - it clears the cache</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span><span class=\"token constant\">OLD_ENV</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Make a copy</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span> <span class=\"token operator\">=</span> <span class=\"token constant\">OLD_ENV</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Restore old environment</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'will receive process.env variables'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Set the variables</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">=</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROXY_PREFIX</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/new-prefix/'</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">API_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://new-api.com/'</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APP_PORT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'7080'</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USE_PROXY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> testedModule <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../config/env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span> <span class=\"token comment\">// dynamic import</span>\n\n    <span class=\"token comment\">// ... actual testing</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"其他\">其他</h2>\n<h3 id=\"本地一切安好线上发布缺少依赖可能是\">本地一切安好，线上发布缺少依赖，可能是？</h3>\n<p>规则：如果<code>NODE_ENV</code>被设置成<code>production</code>，yarn不会安装<code>devDependencies</code>中的依赖，具体可看<a href=\"https://classic.yarnpkg.com/en/docs/cli/install#toc-yarn-install-production-true-false\" target=\"_blank\" rel=\"nofollow\">这里</a>。</p>\n<p>所以这种cmd是合理的：<code>yarn install &#x26;&#x26; yarn test &#x26;&#x26; NODE_ENV=production yarn export</code>。</p>\n<p>相对的，如果<code>NODE_ENV</code>被设置的太早，很可能会导致<code>yarn test</code>缺少依赖。</p>\n<h3 id=\"如何更新包组件服务\">如何更新包/组件/服务</h3>\n<p>除了更新逻辑，一般还有哪些步骤？</p>\n<ol>\n<li>更新测试用例，保证本地测试用例通过。</li>\n<li>本地成功运行服务。</li>\n<li>开一个draft PR.\n<ol>\n<li>将其部署到测试环境。</li>\n<li>在测试环境成功运行。</li>\n</ol>\n</li>\n<li>更新版本。（视具体情形）</li>\n<li>找人review。</li>\n<li>有了approvals，可以merge。</li>\n<li>其余的就是QA、部署流程等。</li>\n</ol>\n<h3 id=\"jwt\">JWT</h3>\n<p>JWT（JSON web token）是一种常见的在客户端与服务端间传递信息的方式。</p>\n<ol>\n<li>除非知道签名，用户是无法伪造数据的。</li>\n<li>而header和payload本身是并没有被加密的。</li>\n</ol>\n<p>所以在实际应用场景中，任何人都可以查看请求的数据，但不知道签名的普通用户没办法自己构造、篡改请求。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/JSON_Web_Token\" target=\"_blank\" rel=\"nofollow\">进一步了解JWT</a>。</p>\n<h3 id=\"yarn2\">Yarn2</h3>\n<p>Yarn2 = <strong>yarn berry</strong>（更加准确）。和 yarn 1.x 比起来算是大改。</p>\n<p>如果使用PnP特性，yarn会生成<code>.pnp.cjs</code>以代替<code>node_modules</code>。</p>\n<p><code>.pnp.cjs</code>只是一些maps，包括如何在文件系统中找到packages。</p>\n<p>而packages本身，是被zipped压缩过的，所以文件的数量远远少于<code>node_modules</code>。</p>\n<p>尽管package被压缩过，我们仍然可以借助<code>fs</code>的能力读取文件。</p>\n<p><strong>更多yarn2，欢迎阅读：</strong></p>\n<ul>\n<li><a href=\"https://blog.logrocket.com/javascript-package-managers-compared/\" target=\"_blank\" rel=\"nofollow\">JavaScript package managers compared: npm, Yarn, or pnpm?</a></li>\n<li><a href=\"https://www.yarnpkg.cn/features/pnp\" target=\"_blank\" rel=\"nofollow\">Plug'n'Play</a></li>\n</ul>\n<h3 id=\"线上监控服务异常排查\">线上监控服务异常排查</h3>\n<p>如果怀疑有异常的线上流量，如何排查：</p>\n<ol>\n<li>调整时间区间，来观察流量是否是一瞬间涌入的。</li>\n<li>比较服务端和客户端的流量，观察流量是否是直接打到服务端的。</li>\n<li>比较流量峰值日志是否有共同点：Client IP, Country, Region, City…</li>\n</ol>\n</body></html>","description":"最近结束的一个项目有很多值得学习的地方，挑一些不敏感的在此记录。其中的每一点其实都有深入挖掘的空间，日后想必会再次遇到。......"},"__N_SSG":true}
{"pageProps":{"id":"make-button-friendly-for-mouse-and-keyboard","title":"键盘Tab与鼠标Click————可访问性与美观的平衡点","date":"2017-07-18","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    h3: \"h3\",\n    a: \"a\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"问题\",\n      children: \"问题\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"作为重视可访问性与还原度的开发者，如何处理被focus的元素的outline可以说是逼死强迫症：\", _jsx(_components.code, {\n        children: \"outline: none\"\n      }), \"显然太不优雅，对于使用tab键来定位的用户直接就是抓瞎。但是不作处理，在Click时就会产生蓝色outline边框，容易打破页面整体风格。在折腾了很久后，俺并未能完全解决问题，不过找到了一个可以参考的平衡点：\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"场景\",\n      children: \"场景\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"回顾一下这种两难问题在何时会出现？我觉得有：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"功能型按钮，即按下后不会立即跳转页面，而是进行某种操作\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"各种输入框，包括文本输入框，单选框，复选框\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"虽然很常见，但种类好像无非就是这两种(•ㅂ•)/\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"解决方案\",\n      children: \"解决方案\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"按钮\",\n      children: \"按钮\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在尝试使用\", _jsx(_components.code, {\n        children: \"<button>\"\n      }), \",\", _jsx(_components.code, {\n        children: \"<input type=\\\"button\\\">\"\n      }), \",\", _jsx(_components.code, {\n        children: \"<a href=\\\"javascript:\\\">\"\n      }), \"这三种标签来还原按钮时，俺发现\", _jsx(_components.code, {\n        children: \"<a>\"\n      }), \"标签居然在默认情况下，click后不会出现outline，同时tab的outline高亮一样有效！这并不是说\", _jsx(_components.code, {\n        children: \"<a>\"\n      }), \"标签点击后不会被focus，从我的三者对比小实验上就能看出focus效果对于他们是一视同仁的：\"]\n    }), \"\\n\", _jsxs(\"p\", {\n      \"data-height\": \"262\",\n      \"data-theme-id\": \"dark\",\n      \"data-slug-hash\": \"RgmBPK\",\n      \"data-default-tab\": \"html,result\",\n      \"data-user\": \"padfoot_07\",\n      \"data-embed-version\": \"2\",\n      \"data-pen-title\": \"三种按钮实现\",\n      class: \"codepen\",\n      children: [\"See the Pen \", _jsx(\"a\", {\n        href: \"https://codepen.io/padfoot_07/pen/RgmBPK/\",\n        children: \"三种按钮实现\"\n      }), \" by Zhouyi (\", _jsx(\"a\", {\n        href: \"https://codepen.io/padfoot_07\",\n        children: \"@padfoot_07\"\n      }), \") on \", _jsx(\"a\", {\n        href: \"https://codepen.io\",\n        children: \"CodePen\"\n      }), \".\"]\n    }), \"\\n\", _jsx(\"script\", {\n      async: true,\n      src: \"https://production-assets.codepen.io/assets/embed/ei.js\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这也就说明，通过tab聚焦元素，的确会使元素被focus，但是outline高亮却不是由这个focus产生的！可惜的是我搜寻了许久，也未能发现这个outline效果与任何开发者可控制的html, css, js直接关联.......也正是如此我才说未能完全解决问题。不过至少，考虑到\", _jsx(_components.code, {\n        children: \"<a>\"\n      }), \"标签的良好兼容性，用其来实现按钮是完全可以接受的，在默认情况下就可以做到只有tab才触发outline。事实上，许多访问性良好的站点，如\", _jsx(_components.a, {\n        href: \"http://www.yuewen.com/\",\n        children: \"阅文集团\"\n      }), \"的官网就是这么做的。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"输入框\",\n      children: \"输入框\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"可惜输入框并不像按钮这么方便，不过从另一个角度想，一般只有较为定制化的输入框才会遇到这里讨论的问题，而定制化的输入框往往都会有focus的特殊状态，方便用户去填写，真的要担心的其实是使用label导致的无法聚焦问题，可以参考张鑫旭老师的 \", _jsx(_components.a, {\n        href: \"http://www.zhangxinxu.com/wordpress/2017/04/css-focus-js-improve-accessibility-keyboard/\",\n        children: \"CSS :focus伪类JS focus事件提高网站键盘可访问性\"\n      }), \" ，这是另话了。\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"这篇短小的水文与其说是提出一个折中的解决方法，更是希望能有一天能搞清上文提出的问题。现在有一些框架还是在使用js来彻底解决这个问题，感觉实在不是很舒服啊 (´c_`)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"description":"作为重视可访问性与还原度的开发者，如何处理被focus的元素的outline可以说是逼死强迫症：`outline: none`显然太不优雅，对于使用tab键来定位的用户直接就是抓瞎。但是不作处理，在C......","usedCustomComponentNames":[]},"__N_SSG":true}
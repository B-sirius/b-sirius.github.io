{"pageProps":{"id":"how-to-loop-in-js","title":"循环，还有这种操作！？","date":"2017-08-15","htmlText":"<html><head></head><body><p>虽说已经看了n遍相关博文，但在实际操作中各种循环的操作实在是令人摸不着头脑，系统整理一回【拍桌】</p>\n<h2 id=\"简单-for-循环\">简单 for 循环</h2>\n<p>简单 for 循环一般只适用于数组，最为常见的一种写法：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在数组长度不变时，用<code>len</code>保存数组长度进行循环效率更佳。</p>\n<p>另外，如需在遍历中进行改变长度的删除操作，一般采用倒序遍历：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 3]</span>\n</code></pre>\n<h2 id=\"for-in-循环\">for-in 循环</h2>\n<h3 id=\"语法\">语法</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p><code>key</code>：每次迭代时，将不同的属性名分配给变量</p>\n<p><code>object</code>：被迭代枚举其属性的对象</p>\n<h3 id=\"适用情况\">适用情况</h3>\n<p>首先咱的确可以用 for-in 来遍历数组</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">arr[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// chrome中的输出结果</span>\n<span class=\"token comment\">// arr[0]: 1</span>\n<span class=\"token comment\">// arr[1]: 2</span>\n<span class=\"token comment\">// arr[2]: 3</span>\n</code></pre>\n<p>但是注意，<strong>for-in</strong> 遍历的是 <strong>对象以及其原型链上可枚举属性(<code>String</code>)，而不是数组的索引(<code>Number</code>)，且迭代顺序依赖于执行环境，并不一定按某种顺序访问元素</strong>，数组在js中也是一个对象，属性<strong>并非是<code>Number</code>类型而是<code>String</code>类型</strong>。<code>length</code>属性值未被遍历也只是因为它不是可枚举属性。</p>\n<p>因此我们做出一点魔改：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token property-access\">arrFeeling</span> <span class=\"token operator\">=</span> <span class=\"token string\">'fucked up'</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">arrayFeeling</span> <span class=\"token operator\">=</span> <span class=\"token string\">'thats good'</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">objFeeling</span> <span class=\"token operator\">=</span> <span class=\"token string\">'emmmmm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// chrome中的输出结果</span>\n<span class=\"token comment\">// 01: 1</span>\n<span class=\"token comment\">// 11: 2</span>\n<span class=\"token comment\">// 21: 3</span>\n<span class=\"token comment\">// arrFeeling1: fucked up</span>\n<span class=\"token comment\">// arrayFeeling1: thats good</span>\n<span class=\"token comment\">// objFeeling1: emmmmm</span>\n</code></pre>\n<p>可以看出，这里的结果已经他喵的和我们预想的数组遍历差了很多很多【震惊】，因此从某种意义上讲， for-in 遍历的初衷是遍历对象中的属性，传统的数组遍历并不适合用for-in。</p>\n<p>但是也正得益于这个特性，for-in遍历可用于遍历<strong>稀疏数组</strong>：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">999</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// chrome中的输出</span>\n<span class=\"token comment\">// 999: 1</span>\n</code></pre>\n<p>此处的 <code>arr.length</code> 为1000，如果用简单for循环来输出，会遍历1000次（输出999个<code>undefined</code>），而使用for-in只会遍历一次。如果担心输出原型链上的属性，可以利用<code>hasOwnProperty</code>方法。</p>\n<h2 id=\"foreach\">forEach</h2>\n<p>简单的例子：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token string\">'die'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'die!'</span> <span class=\"token comment\">// 不会被遍历到</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// null</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 5</span>\n</code></pre>\n<p>forEach 是Array的方法，会为数组中含<strong>有效值（也就是说，会跳过数组空位)</strong>(<strong>包括值为null</strong>)的每一<strong>索引项</strong>执行一次传入的回调函数。回调函数会被依次传入三个参数：</p>\n<ul>\n<li>数组当前项的值</li>\n<li>数组当前项的索引（<strong>Number类型！</strong>）</li>\n<li>数组对象本身</li>\n</ul>\n<p>需要注意的是，forEach 不会在迭代前创建数组的副本，因此<strong>可以改变原数组</strong>，若迭代时数组长度改变：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nwords<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>word <span class=\"token operator\">===</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    words<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// one</span>\n<span class=\"token comment\">// two</span>\n<span class=\"token comment\">// four</span>\n</code></pre>\n<p>forEach 的一大缺点：<strong>一旦开始就无法跳出</strong>，因此ES5中提供了一些其他类似的方法：</p>\n<ul>\n<li>every:测试数组的所有元素是否都通过了指定函数的测试， 循环在第一次 return false 后返回，<strong>不会改变原数组</strong></li>\n<li>some: 测试数组中的某些元素是否通过由提供的函数实现的测试，循环在第一次 return true 后返回，<strong>不会改变原数组</strong></li>\n<li>filter: 返回一个新的数组，其包含通过所提供函数实现的测试的所有元素，<strong>不会改变原数组</strong></li>\n<li>map: 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果，<strong>不会改变原数组</strong></li>\n<li>reduce: 对数组中的元素依次处理，将上次处理结果作为下次处理的输入，最后得到最终结果，<strong>啊——不会改变原数组</strong></li>\n</ul>\n<h2 id=\"for-of\">for-of</h2>\n<p>简单的例子：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> val <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n</code></pre>\n<p>for-of 乍看之下和forEach的功能好像重叠了，但是作为ES6新支持的语法，自然有一些优点：</p>\n<ul>\n<li>作为正经的 for 循环语法，可以正常的 break，continue，return</li>\n<li>for-of 循环并非数组专用，它支持<strong>可迭代对象</strong>，包括 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array\" target=\"_blank\" rel=\"nofollow\"><code>Array</code></a>, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Map\" target=\"_blank\" rel=\"nofollow\"><code>Map</code></a>, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"nofollow\"><code>Set</code></a>, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String\" target=\"_blank\" rel=\"nofollow\"><code>String</code></a>, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" target=\"_blank\" rel=\"nofollow\"><code>TypedArray</code></a>，<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\" target=\"_blank\" rel=\"nofollow\">arguments</a> 对象等等，注意不包括<strong>Object</strong>对象，如果你想迭代Object对象，for-in循环更加适合</li>\n<li>搭配ES6新增的用户自定义迭代器（说的那么模糊，因为我还不是很懂）</li>\n</ul>\n<p>此外，for-of与上面一大串forEach, map等有一个很大的区别：<strong>不会跳过数组空位</strong>:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'holy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shit'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// holy</span>\n<span class=\"token comment\">// shit</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// holy</span>\n<span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// shit</span>\n</code></pre>\n<hr>\n<p>最后回头看一下，循环遍历这个操作其实需要考虑很多：</p>\n<ul>\n<li>遍历方法所适用的对象</li>\n<li>是否会创建原对象副本（改变原对象）</li>\n<li>遍历时会传入的参数（<code>undefined</code>，原型链）以及参数类型（<code>Number</code>, <code>String</code>）</li>\n<li>如何处理空值</li>\n<li>...</li>\n</ul>\n<p>因此弄清楚他们之间的分别还是有必要的吧科科。ES6还添加了个叫<strong>iterable</strong>的玩意儿，也与迭代密切相关，不是很懂先坑了【逃】</p>\n</body></html>","description":"虽说已经看了n遍相关博文，但在实际操作中各种循环的操作实在是令人摸不着头脑，系统整理一回【拍桌】......"},"__N_SSG":true}
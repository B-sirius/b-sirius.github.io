{"pageProps":{"id":"loop-in-es6","title":"循环，还有这种操作！？——es6补充","date":"2017-10-22","htmlText":"<html><head></head><body><p>缘，妙不可言——开始系统梳理es6后，发现关于循环的知识点又有了不少补充，正好填一下上次的坑嘛【抖】，本文有大量部分直接摘于<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"nofollow\">es6标准入门</a></p>\n<p>ps: <a href=\"http://b-sirius.me/2017/08/15/%E5%BE%AA%E7%8E%AF%EF%BC%8C%E8%BF%98%E6%9C%89%E8%BF%99%E7%A7%8D%E6%93%8D%E4%BD%9C/\" target=\"_blank\" rel=\"nofollow\">上集回顾</a></p>\n<hr>\n<h2 id=\"object对象的拓展\">Object对象的拓展</h2>\n<h3 id=\"objectkeys\">Object.keys()</h3>\n<p>其实是es5引入的方法，返回一个数组，常用于与for-of搭配遍历，成员是**参数对象自身（不含继承）<strong>的所有</strong>可枚举（enumerable）**属性的键名：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"foo\", \"baz\"]</span>\n</code></pre>\n<p>相比之下，我们更熟悉的for-in遍历虽然同样是遍历<strong>可枚举属性</strong>的键名，但是它遍历的范围不只是对象自身，还有它的<strong>原型链</strong>，相比之下object.keys()在大多情况下更加适用。</p>\n<p>另外，es2017中有一个提案，引入<strong>Object.values</strong>和<strong>Object.entires</strong>与其配套使用：</p>\n<pre class=\"language-javascript\"><code class=\"language-Javascript\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>keys<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> entries<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a', 'b', 'c'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 2, 3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 1], ['b', 2], ['c', 3]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"iterator遍历器\">Iterator遍历器</h2>\n<p>其实这才是重头戏啊，由于涉及到的点太多，只提及一点概念以及相关关键词。</p>\n<h3 id=\"概念\">概念</h3>\n<p>Iterator 的作用有三个：</p>\n<ul>\n<li>各种数据结构，提供一个统一的、简便的访问接口</li>\n<li>使得数据结构的成员能够按某种次序排</li>\n<li>ES6创造了一种新的遍历命令<code>for...of</code>循环，Iterator接口主要供<code>for...of</code>消费</li>\n</ul>\n<p>Iterator的遍历过程如下：</p>\n<ol>\n<li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，<strong>遍历器对象本质上，就是一个指针对象</strong></li>\n<li>第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员</li>\n<li>第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员</li>\n<li>不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置</li>\n</ol>\n<p>每一次调用<code>next</code>方法，都会返回数据结构的当前成员的信息。具体来说，就是<strong>返回一个包含<code>value</code>和<code>done</code>两个属性的对象</strong>。其中，<code>value</code>属性是当前成员的值，<code>done</code>属性是一个布尔值，表示遍历是否结束。</p>\n<p>模拟 next 方法返回值：</p>\n<pre class=\"language-javascript\"><code class=\"language-Javascript\"><span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">makeIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: \"a\", done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: \"b\", done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: undefined, done: true }</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> nextIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> nextIndex <span class=\"token operator\">&#x3C;</span> array<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">?</span>\n        <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> array<span class=\"token punctuation\">[</span>nextIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span>\n        <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"默认iterator接口\">默认Iterator接口</h3>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的<code>Symbol.iterator</code>属性，或者说，<strong>一个数据结构只要具有<code>Symbol.iterator</code>属性，就可以认为是“可遍历的”（iterable）</strong>。<code>Symbol.iterator</code>属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历。</p>\n<p>而原生具有该借口的数据结构如下：</p>\n<ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>函数的 arguments 对象</li>\n<li>NodeList 对象</li>\n</ul>\n<p>以数组为例：</p>\n<pre class=\"language-javascript\"><code class=\"language-Javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> iter <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\niter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 'a', done: false }</span>\niter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 'b', done: false }</span>\niter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 'c', done: false }</span>\niter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: undefined, done: true }</span>\n</code></pre>\n<p>一个对象如果要具备可被<code>for...of</code>循环调用的 Iterator 接口，就必须在<code>Symbol.iterator</code>的属性上部署遍历器生成方法（原型链上的对象具有该方法也可），这个操作骚方法就太多了，还是详看es6吧，其中最值得注意的骚操作就是<strong>Generator函数</strong>。</p>\n<h3 id=\"调用iterator接口的场合\">调用Iterator接口的场合</h3>\n<ul>\n<li>for-of循环</li>\n<li>解构赋值</li>\n<li>扩展运算符</li>\n<li>yield*</li>\n</ul>\n<hr>\n<p>没了？没了。Iterator涉及到的点和用法在es6入门中整理的很好了，继续复制粘贴感觉也没有太大意义嗯——</p>\n</body></html>","description":"---......"},"__N_SSG":true}